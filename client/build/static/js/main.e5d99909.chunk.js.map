{"version":3,"sources":["logo.svg","components/Main.jsx","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Main","props","clickButton","el","click","countingButtonPress","event","state","startGame","keyCode","handleButtonPress","joinRoom","room","socketIO","data","username","emit","setState","id","count","message","timestamp","Date","now","console","log","loadClient","startingScreen","createRoomChecked","joinRoomChecked","roomIdGenerated","response","users","document","addEventListener","this","replace","c","r","Math","random","toString","socketIOClient","transport","on","disconnect","removeEventListener","Typography","variant","style","padding","Button","color","size","onClick","TextField","value","autoFocus","error","onChange","target","placeholder","fontFamily","fontSize","background","margin","marginTop","borderRadius","zIndex","FormGroup","row","FormControlLabel","control","Checkbox","checked","label","helperText","onKeyPress","ev","key","preventDefault","Grid","container","spacing","align","justify","direction","item","xs","Fragment","map","user","alignItems","isPlaying","duration","strokeWidth","colors","remainingTime","type","ref","Component","App","className","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.e5d99909.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, { Component } from \"react\";\nimport {\n  Checkbox,\n  FormGroup,\n  FormControlLabel,\n  TextField,\n  Button,\n  Typography,\n  Grid,\n} from \"@material-ui/core\";\n\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\n\n// import ClientComponent from \"./ClientComponent\";\n\nimport socketIOClient from \"socket.io-client\";\n// import openSocket from \"socket.io-client\";\nconst ENDPOINT = \"http://192.168.4.26:3001\";\n\nfunction uuidv4() {\n  return \"xxxxxxxx\".replace(/[xy]/g, function (c) {\n    var r = (Math.random() * 16) | 0,\n      v = c === \"x\" ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\nfunction generateUniqueNumber() {\n  return \"xxxxxxxxxxxxxxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n    var r = (Math.random() * 16) | 0,\n      v = c === \"x\" ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      room: \"\",\n      count: 0,\n      loadClient: true,\n      startingScreen: true,\n      createRoomChecked: false,\n      joinRoomChecked: false,\n      roomIdGenerated: false,\n      startGame: false,\n      response: \"\",\n      socketIO: null,\n      id: null,\n      username: \"\",\n      users: [],\n    };\n  }\n\n  clickButton = (el) => {\n    el.click();\n  };\n\n  countingButtonPress = (event) => {\n    const { startGame } = this.state;\n    if (startGame) {\n      if (event?.keyCode === 32) {\n        this.handleButtonPress();\n      }\n    }\n  };\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.countingButtonPress, false);\n\n    this.setState({ id: generateUniqueNumber() }, () => {\n      this.setState(\n        { socketIO: socketIOClient(ENDPOINT, { transport: [\"websocket\"] }) },\n        () => {\n          this.state.socketIO.on(\"count\", (data) => {\n            this.setState({ count: data });\n          });\n          this.state.socketIO.on(\"users\", (data) => {\n            this.setState({ users: data });\n          });\n        }\n      );\n    });\n\n    return () => this.socketIO.disconnect();\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.countingButtonPress, false);\n  }\n\n  joinRoom = () => {\n    const { room, socketIO, username } = this.state;\n    const data = {\n      room: room,\n      username: username,\n    };\n    socketIO.emit(\"room\", data);\n    this.setState({ startGame: true });\n  };\n\n  handleButtonPress = () => {\n    const { id, count, room, socketIO, username } = this.state;\n    // this.setState({ count: count+1});\n\n    const data = {\n      id: id,\n      room: room,\n      message: \"Hello World\",\n      timestamp: Date.now(),\n      username: username,\n    };\n    console.log(data);\n    socketIO.emit(\"buttonPress\", data);\n  };\n\n  render() {\n    const {\n      room,\n      count,\n      loadClient,\n      startingScreen,\n      createRoomChecked,\n      joinRoomChecked,\n      roomIdGenerated,\n      startGame,\n      response,\n      socketIO,\n      username,\n      users,\n    } = this.state;\n    return (\n      <>\n        {/* <Typography variant=\"h1\">Addiction With Extra Steps</Typography> */}\n        {!startGame ? (\n          <>\n            {startingScreen && (\n              <>\n                <Typography variant=\"h1\" style={{ padding: \"0.5em\" }}>\n                  Clicker.io\n                </Typography>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  size=\"large\"\n                  onClick={() => {\n                    this.setState({ startingScreen: false });\n                  }}\n                >\n                  Start\n                </Button>\n              </>\n            )}\n            {!startingScreen && (\n              <>\n                <TextField\n                  value={username}\n                  autoFocus={true}\n                  // required\n                  error={username === \"\"}\n                  onChange={(event) => {\n                    this.setState({ username: event.target.value });\n                  }}\n                  placeholder={\"Username\"}\n                  style={{\n                    fontFamily: \"Helvetica\",\n                    fontSize: \"32px\",\n                    background: \"#ffffff\",\n                    padding: \"10px 20px 10px 20px\",\n                    // padding: '20px',\n                    margin: \"20px\",\n                    marginTop: \"20px\",\n                    borderRadius: \"12px\",\n                    zIndex: \"100\",\n                  }}\n                />\n                <FormGroup row>\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        checked={createRoomChecked}\n                        onChange={() => {\n                          if (!createRoomChecked && joinRoomChecked) {\n                            this.setState({\n                              joinRoomChecked: !joinRoomChecked,\n                            });\n                          }\n                          this.setState({\n                            createRoomChecked: !createRoomChecked,\n                          });\n                        }}\n                      />\n                    }\n                    label=\"Create Room\"\n                  />\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        checked={joinRoomChecked}\n                        onChange={() => {\n                          if (createRoomChecked && !joinRoomChecked) {\n                            this.setState({\n                              createRoomChecked: !createRoomChecked,\n                            });\n                            // setCreateRoomChecked(!createRoomChecked);\n                          }\n                          this.setState({ joinRoomChecked: !joinRoomChecked });\n                          // setJoinRoomChecked(!joinRoomChecked);\n                        }}\n                      />\n                    }\n                    label=\"Join Room\"\n                  />\n                </FormGroup>\n                {createRoomChecked ? (\n                  <>\n                    <Button\n                      onClick={() => {\n                        this.setState({ room: uuidv4() }, () => {\n                          this.setState({ roomIdGenerated: true }, () => {\n                            this.joinRoom();\n                            // this.setState({startGame: true});\n                          });\n                        });\n                      }}\n                      variant=\"contained\"\n                      color=\"primary\"\n                    >\n                      Generate Room Id\n                    </Button>\n                  </>\n                ) : null}\n                {joinRoomChecked ? (\n                  <>\n                    <TextField\n                      value={room}\n                      autoFocus={true}\n                      helperText={\"Enter Room Id Here...\"}\n                      onChange={(event) => {\n                        this.setState({ room: event.target.value });\n                        // setRoom(event.target.value);\n                      }}\n                      onKeyPress={(ev) => {\n                        if (ev.key === \"Enter\") {\n                          // Do code here\n                          this.joinRoom();\n                          this.setState({ startGame: true });\n                          ev.preventDefault();\n                        }\n                      }}\n                    />\n                    <Button\n                      onClick={() => {\n                        this.joinRoom();\n                        this.setState({ startGame: true });\n                        // setStartGame(true);\n                      }}\n                      variant=\"contained\"\n                      color=\"primary\"\n                    >\n                      Join Room\n                    </Button>\n                  </>\n                ) : null}\n\n                {roomIdGenerated ? (\n                  <>\n                    <Typography>{room}</Typography>\n                    {/* <TextField\n          value={room}\n          disabled={true}\n        /> */}\n                  </>\n                ) : null}\n              </>\n            )}\n          </>\n        ) : null}\n        {startGame ? (\n          <>\n            {/* {users.map((user) => {\n              return (\n                <Typography variant=\"body\">{`${user}`}</Typography>\n              )\n            })} */}\n            <Grid\n              container\n              spacing={0}\n              align=\"center\"\n              justify=\"center\"\n              direction=\"column\"\n            >\n              <Grid container item xs={12} spacing={0}>\n                <React.Fragment>\n                  {users.map((user) => {\n                    return (\n                      <Grid\n                        item\n                        xs\n                        align={\"center\"}\n                        alignItems={\"center\"}\n                        justify={\"center\"}\n                      >\n                        <CountdownCircleTimer\n                          isPlaying\n                          duration={10}\n                          strokeWidth={5}\n                          size={60}\n                          colors={[\n                            [\"#004777\", 0.33],\n                            [\"#F7B801\", 0.33],\n                            [\"#A30000\", 0.33],\n                          ]}\n                        >\n                          {({ remainingTime }) => remainingTime}\n                        </CountdownCircleTimer>\n                        <Typography variant=\"body\">{`${user}`}</Typography>\n                      </Grid>\n                    );\n                  })}\n                </React.Fragment>\n              </Grid>\n              <Grid item xs={12}>\n                <Typography>{`Room Id: ${room}`}</Typography>\n                <Typography variant=\"h1\">{count}</Typography>\n                <Button\n                  type=\"submit\"\n                  variant=\"contained\"\n                  color=\"primary\"\n                  ref={this.countingButtonPress}\n                  onClick={() => {\n                    this.handleButtonPress();\n                    // this.setState({count: count+1});\n                    // setCount(count + 1);\n                  }}\n                >\n                  Press Me\n                </Button>\n              </Grid>\n              <Grid item xs={12}></Grid>\n            </Grid>\n          </>\n        ) : null}\n      </>\n    );\n  }\n}\n\nexport default Main;\n","// import React from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Main from './components/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Main/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}