[{"/home/wkalim/Documents/University_Courses/CS4483/clicker.io/client/src/index.js":"1","/home/wkalim/Documents/University_Courses/CS4483/clicker.io/client/src/App.js":"2","/home/wkalim/Documents/University_Courses/CS4483/clicker.io/client/src/serviceWorkerRegistration.js":"3","/home/wkalim/Documents/University_Courses/CS4483/clicker.io/client/src/reportWebVitals.js":"4","/home/wkalim/Documents/University_Courses/CS4483/clicker.io/client/src/components/Main.jsx":"5","/home/wkalim/Documents/University_Courses/CS4483/clicker.io/client/src/components/GameScreen.jsx":"6","/home/wkalim/Documents/University_Courses/CS4483/clicker.io/client/src/components/UserCard.jsx":"7"},{"size":818,"mtime":1612588223096,"results":"8","hashOfConfig":"9"},{"size":883,"mtime":1612588376664,"results":"10","hashOfConfig":"9"},{"size":5064,"mtime":1612588223096,"results":"11","hashOfConfig":"9"},{"size":364,"mtime":1612588223096,"results":"12","hashOfConfig":"9"},{"size":8646,"mtime":1613257254876,"results":"13","hashOfConfig":"9"},{"size":4618,"mtime":1613257255988,"results":"14","hashOfConfig":"9"},{"size":3100,"mtime":1613257257028,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"9dgfjg",{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/wkalim/Documents/University_Courses/CS4483/clicker.io/client/src/index.js",[],["34","35"],"/home/wkalim/Documents/University_Courses/CS4483/clicker.io/client/src/App.js",["36"],"// import React from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Main from './components/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Main/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","/home/wkalim/Documents/University_Courses/CS4483/clicker.io/client/src/serviceWorkerRegistration.js",[],"/home/wkalim/Documents/University_Courses/CS4483/clicker.io/client/src/reportWebVitals.js",[],"/home/wkalim/Documents/University_Courses/CS4483/clicker.io/client/src/components/Main.jsx",["37","38","39","40"],"import React, { Component } from \"react\";\nimport {\n  Checkbox,\n  FormGroup,\n  FormControlLabel,\n  TextField,\n  Button,\n  Typography,\n  Grid,\n} from \"@material-ui/core\";\n\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\n\nimport GameScreen from \"./GameScreen\";\n\n// import ClientComponent from \"./ClientComponent\";\n\nimport socketIOClient from \"socket.io-client\";\n// import openSocket from \"socket.io-client\";\n// const ENDPOINT = \"http://192.168.4.26:3001\";\n// const ENDPOINT = \"http://localhost:5000\";\n\nconst ENDPOINT = \"\";\n\nfunction uuidv4() {\n  return \"xxxxxxxx\".replace(/[xy]/g, function (c) {\n    var r = (Math.random() * 16) | 0,\n      v = c === \"x\" ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\nfunction generateUniqueNumber() {\n  return \"xxxxxxxxxxxxxxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n    var r = (Math.random() * 16) | 0,\n      v = c === \"x\" ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      room: \"\",\n      count: 0,\n      loadClient: true,\n      startingScreen: true,\n      createRoomChecked: false,\n      joinRoomChecked: false,\n      roomIdGenerated: false,\n      startGame: false,\n      response: \"\",\n      socketIO: null,\n      id: null,\n      username: \"\",\n      users: [],\n      isTheGameStartedInTheRoom: false,\n    };\n  }\n\n  clickButton = (el) => {\n    el.click();\n  };\n\n  componentDidMount() {\n    this.setState(\n      {\n        id: generateUniqueNumber(),\n        socketIO: socketIOClient(ENDPOINT, { transport: [\"websocket\"] }),\n      },\n      () => {\n        this.state.socketIO.on(\"count\", (data) => {\n          this.setState({ count: data });\n        });\n        this.state.socketIO.on(\"users\", (data) => {\n          this.setState({ users: data });\n        });\n        this.state.socketIO.on(\"change game status\", (data) => {\n          this.setState({ isTheGameStartedInTheRoom: data });\n        });\n      }\n    );\n    // this.setState({ id: generateUniqueNumber() }, () => {\n    //   this.setState(\n    //     { socketIO: socketIOClient(ENDPOINT, { transport: [\"websocket\"] }) },\n    //     () => {\n    //       this.state.socketIO.on(\"count\", (data) => {\n    //         this.setState({ count: data });\n    //       });\n    //       this.state.socketIO.on(\"users\", (data) => {\n    //         this.setState({ users: data });\n    //       });\n    //     }\n    //   );\n    // });\n\n    return () => this.socketIO.disconnect();\n    // this.socketIO.emit(\"disconnect\", {\n    //   id: this.state.id,\n    //   room: this.state.room,\n    // });\n  }\n\n  joinRoom = () => {\n    const { id, room, socketIO, username } = this.state;\n    const data = {\n      id: id,\n      room: room,\n      username: username,\n    };\n    socketIO.emit(\"new user\", data);\n    this.setState({ startGame: true });\n  };\n\n  render() {\n    const {\n      id,\n      room,\n      count,\n      loadClient,\n      startingScreen,\n      createRoomChecked,\n      joinRoomChecked,\n      roomIdGenerated,\n      startGame,\n      response,\n      socketIO,\n      username,\n      users,\n      isTheGameStartedInTheRoom,\n    } = this.state;\n    return (\n      <>\n        {!startGame ? (\n          <>\n            {startingScreen && (\n              <>\n                <Typography variant=\"h1\" style={{ padding: \"0.5em\" }}>\n                  Clicker.io\n                </Typography>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  size=\"large\"\n                  onClick={() => {\n                    this.setState({ startingScreen: false });\n                  }}\n                >\n                  Start\n                </Button>\n              </>\n            )}\n            {!startingScreen && (\n              <>\n                <TextField\n                  value={username}\n                  autoFocus={true}\n                  // required\n                  error={username === \"\"}\n                  onChange={(event) => {\n                    this.setState({ username: event.target.value });\n                  }}\n                  placeholder={\"Username\"}\n                  style={{\n                    fontFamily: \"Helvetica\",\n                    fontSize: \"32px\",\n                    background: \"#ffffff\",\n                    padding: \"10px 20px 10px 20px\",\n                    // padding: '20px',\n                    margin: \"20px\",\n                    marginTop: \"20px\",\n                    borderRadius: \"12px\",\n                    zIndex: \"100\",\n                  }}\n                />\n                <FormGroup row>\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        checked={createRoomChecked}\n                        onChange={() => {\n                          if (!createRoomChecked && joinRoomChecked) {\n                            this.setState({\n                              joinRoomChecked: !joinRoomChecked,\n                            });\n                          }\n                          this.setState({\n                            createRoomChecked: !createRoomChecked,\n                          });\n                        }}\n                      />\n                    }\n                    label=\"Create Room\"\n                  />\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        checked={joinRoomChecked}\n                        onChange={() => {\n                          if (createRoomChecked && !joinRoomChecked) {\n                            this.setState({\n                              createRoomChecked: !createRoomChecked,\n                            });\n                            // setCreateRoomChecked(!createRoomChecked);\n                          }\n                          this.setState({ joinRoomChecked: !joinRoomChecked });\n                          // setJoinRoomChecked(!joinRoomChecked);\n                        }}\n                      />\n                    }\n                    label=\"Join Room\"\n                  />\n                </FormGroup>\n                {createRoomChecked ? (\n                  <>\n                    <Button\n                      onClick={() => {\n                        this.setState({ room: uuidv4() }, () => {\n                          this.setState({ roomIdGenerated: true }, () => {\n                            this.joinRoom();\n                            // this.setState({startGame: true});\n                          });\n                        });\n                      }}\n                      variant=\"contained\"\n                      color=\"primary\"\n                    >\n                      Generate Room Id\n                    </Button>\n                  </>\n                ) : null}\n                {joinRoomChecked ? (\n                  <>\n                    <TextField\n                      value={room}\n                      autoFocus={true}\n                      helperText={\"Enter Room Id Here...\"}\n                      onChange={(event) => {\n                        this.setState({ room: event.target.value });\n                        // setRoom(event.target.value);\n                      }}\n                      onKeyPress={(ev) => {\n                        if (ev.key === \"Enter\") {\n                          // Do code here\n                          this.joinRoom();\n                          this.setState({ startGame: true });\n                          ev.preventDefault();\n                        }\n                      }}\n                    />\n                    <Button\n                      onClick={() => {\n                        this.joinRoom();\n                        this.setState({ startGame: true });\n                        // setStartGame(true);\n                      }}\n                      variant=\"contained\"\n                      color=\"primary\"\n                    >\n                      Join Room\n                    </Button>\n                  </>\n                ) : null}\n\n                {roomIdGenerated ? (\n                  <>\n                    <Typography>{room}</Typography>\n                  </>\n                ) : null}\n              </>\n            )}\n          </>\n        ) : null}\n        {startGame ? (\n          <GameScreen\n            id={id}\n            count={count}\n            room={room}\n            socketIO={socketIO}\n            username={username}\n            users={users}\n            startGame={startGame}\n            isTheGameStartedInTheRoom={isTheGameStartedInTheRoom}\n          />\n        ) : null}\n      </>\n    );\n  }\n}\n\nexport default Main;\n","/home/wkalim/Documents/University_Courses/CS4483/clicker.io/client/src/components/GameScreen.jsx",["41","42","43","44","45","46","47","48","49","50","51","52","53"],"import React, { useState, useEffect } from \"react\";\nimport {\n  Grid,\n  Typography,\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Paper,\n} from \"@material-ui/core\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\n\nimport { DataGrid } from \"@material-ui/data-grid\";\n\nimport UserCard from \"./UserCard\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    padding: theme.spacing(2),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n  },\n  // root: {\n  //   display: \"flex\",\n  //   marginTop: theme.spacing.unit * 3,\n  //   overflowX: \"hide\",\n  //   width: \"100%\",\n  //   // justifyContent: \"center\",\n  //   // alignItems: \"center\",\n  //   backgroundColor: \"#282c34\",\n  // },\n  // table: {\n  //   minWidth: 340,\n  // },\n  // tableCell: {\n  //   paddingRight: 4,\n  //   paddingLeft: 5,\n  //   textAlign: \"center\",\n  //   margin: \"auto\",\n  // },\n}));\n\nfunction GameScreen(props) {\n  const classes = useStyles();\n\n  const [isGameCompleted, setIsGameCompleted] = useState(false);\n\n  const {\n    id,\n    count,\n    room,\n    socketIO,\n    username,\n    users,\n    startGame,\n    isTheGameStartedInTheRoom,\n  } = props;\n  const pageSize = 5;\n\n  // useEffect(() => {\n  //   document.addEventListener(\"keydown\", countingButtonPress, false);\n\n  //   return () => {\n  //     document.removeEventListener(\"keydown\", countingButtonPress, false);\n  //   };\n  // }, []);\n\n  console.log(\"Users\");\n  console.log(users);\n\n  const columns = [\n    { field: \"id\", headerName: \"ID\", width: 100 },\n    { field: \"username\", headerName: \"Name\", width: 100 },\n    { field: \"score\", headerName: \"Score\", width: 100 },\n    { field: \"timeRemaining\", headerName: \"Timer\", width: 100 },\n  ];\n  const rows = users.map((user, index) => {\n    console.log(user);\n\n    const row = {\n      id: index + 1,\n      username: user.name,\n      score: user.score,\n      timeRemaining: user.timeRemaining,\n    };\n    return row;\n  });\n\n  // const countingButtonPress = (event) => {\n  //   if (startGame) {\n  //     if (event?.keyCode === 32) {\n  //       handleButtonPress();\n  //     }\n  //   }\n  // };\n\n  console.log(\"rows\");\n  console.log(rows);\n\n  const handleButtonPress = () => {\n    const data = {\n      id: id,\n      room: room,\n      message: \"Hello World\",\n      timestamp: Date.now(),\n      username: username,\n    };\n\n    console.log(\"data\");\n    console.log(data);\n    socketIO.emit(\"buttonPress\", data);\n  };\n\n  const startGameButton = () => {\n    socketIO.emit(\"change game status\", true);\n  };\n\n  return (\n    <>\n      <Grid\n        container\n        spacing={0}\n        align=\"center\"\n        justify=\"center\"\n        direction=\"column\"\n      >\n        <div className={classes.root}>\n          <Grid container item xs={12} spacing={0}>\n            <React.Fragment>\n              {users.map((user) => {\n                return (\n                  <>\n                    <Grid item xs>\n                      <UserCard\n                        name={user.name}\n                        score={user.score}\n                        timeRemaining={user.timeRemaining}\n                        socketIO={socketIO}\n                        isTheGameStartedInTheRoom={isTheGameStartedInTheRoom}\n                        setIsGameCompleted={(data) => setIsGameCompleted(data)}\n                      />\n                    </Grid>\n                  </>\n                );\n              })}\n            </React.Fragment>\n          </Grid>\n        </div>\n\n        <Grid item xs={12}>\n          <Typography>{`Room Id: ${room}`}</Typography>\n          <Typography variant=\"h1\">{count}</Typography>\n\n          {isTheGameStartedInTheRoom ? (\n            <>\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n                // ref={countingButtonPress}\n                onClick={() => {\n                  handleButtonPress();\n                }}\n              >\n                Press Me\n              </Button>\n            </>\n          ) : (\n            <>\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n                // ref={countingButtonPress}\n                onClick={() => {\n                  startGameButton();\n                }}\n              >\n                Start Game\n              </Button>\n            </>\n          )}\n        </Grid>\n        <Grid item xs={12}></Grid>\n      </Grid>\n    </>\n  );\n}\n\nexport default GameScreen;\n","/home/wkalim/Documents/University_Courses/CS4483/clicker.io/client/src/components/UserCard.jsx",["54"],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":29,"column":8,"nodeType":"61","messageId":"62","endLine":29,"endColumn":12},{"ruleId":"59","severity":1,"message":"63","line":9,"column":3,"nodeType":"61","messageId":"62","endLine":9,"endColumn":7},{"ruleId":"59","severity":1,"message":"64","line":12,"column":10,"nodeType":"61","messageId":"62","endLine":12,"endColumn":30},{"ruleId":"59","severity":1,"message":"65","line":121,"column":7,"nodeType":"61","messageId":"62","endLine":121,"endColumn":17},{"ruleId":"59","severity":1,"message":"66","line":127,"column":7,"nodeType":"61","messageId":"62","endLine":127,"endColumn":15},{"ruleId":"59","severity":1,"message":"67","line":1,"column":27,"nodeType":"61","messageId":"62","endLine":1,"endColumn":36},{"ruleId":"59","severity":1,"message":"68","line":6,"column":3,"nodeType":"61","messageId":"62","endLine":6,"endColumn":8},{"ruleId":"59","severity":1,"message":"69","line":7,"column":3,"nodeType":"61","messageId":"62","endLine":7,"endColumn":12},{"ruleId":"59","severity":1,"message":"70","line":8,"column":3,"nodeType":"61","messageId":"62","endLine":8,"endColumn":12},{"ruleId":"59","severity":1,"message":"71","line":9,"column":3,"nodeType":"61","messageId":"62","endLine":9,"endColumn":12},{"ruleId":"59","severity":1,"message":"72","line":10,"column":3,"nodeType":"61","messageId":"62","endLine":10,"endColumn":11},{"ruleId":"59","severity":1,"message":"73","line":11,"column":3,"nodeType":"61","messageId":"62","endLine":11,"endColumn":8},{"ruleId":"59","severity":1,"message":"64","line":16,"column":10,"nodeType":"61","messageId":"62","endLine":16,"endColumn":30},{"ruleId":"59","severity":1,"message":"74","line":18,"column":10,"nodeType":"61","messageId":"62","endLine":18,"endColumn":18},{"ruleId":"59","severity":1,"message":"75","line":55,"column":10,"nodeType":"61","messageId":"62","endLine":55,"endColumn":25},{"ruleId":"59","severity":1,"message":"76","line":64,"column":5,"nodeType":"61","messageId":"62","endLine":64,"endColumn":14},{"ruleId":"59","severity":1,"message":"77","line":67,"column":9,"nodeType":"61","messageId":"62","endLine":67,"endColumn":17},{"ruleId":"59","severity":1,"message":"78","line":80,"column":9,"nodeType":"61","messageId":"62","endLine":80,"endColumn":16},{"ruleId":"59","severity":1,"message":"79","line":69,"column":20,"nodeType":"61","messageId":"62","endLine":69,"endColumn":31},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Grid' is defined but never used.","'CountdownCircleTimer' is defined but never used.","'loadClient' is assigned a value but never used.","'response' is assigned a value but never used.","'useEffect' is defined but never used.","'Table' is defined but never used.","'TableBody' is defined but never used.","'TableCell' is defined but never used.","'TableHead' is defined but never used.","'TableRow' is defined but never used.","'Paper' is defined but never used.","'DataGrid' is defined but never used.","'isGameCompleted' is assigned a value but never used.","'startGame' is assigned a value but never used.","'pageSize' is assigned a value but never used.","'columns' is assigned a value but never used.","'setDuration' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]