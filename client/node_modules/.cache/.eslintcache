[{"/home/wkalim/Documents/University_Courses/CS4483/clicker.io/client/src/index.js":"1","/home/wkalim/Documents/University_Courses/CS4483/clicker.io/client/src/App.js":"2","/home/wkalim/Documents/University_Courses/CS4483/clicker.io/client/src/serviceWorkerRegistration.js":"3","/home/wkalim/Documents/University_Courses/CS4483/clicker.io/client/src/reportWebVitals.js":"4","/home/wkalim/Documents/University_Courses/CS4483/clicker.io/client/src/components/Main.jsx":"5"},{"size":818,"mtime":1612588223096,"results":"6","hashOfConfig":"7"},{"size":883,"mtime":1612588376664,"results":"8","hashOfConfig":"7"},{"size":5064,"mtime":1612588223096,"results":"9","hashOfConfig":"7"},{"size":364,"mtime":1612588223096,"results":"10","hashOfConfig":"7"},{"size":10583,"mtime":1612645004672,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"9dgfjg",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"/home/wkalim/Documents/University_Courses/CS4483/clicker.io/client/src/index.js",[],["25","26"],"/home/wkalim/Documents/University_Courses/CS4483/clicker.io/client/src/App.js",["27"],"// import React from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Main from './components/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Main/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","/home/wkalim/Documents/University_Courses/CS4483/clicker.io/client/src/serviceWorkerRegistration.js",[],"/home/wkalim/Documents/University_Courses/CS4483/clicker.io/client/src/reportWebVitals.js",[],"/home/wkalim/Documents/University_Courses/CS4483/clicker.io/client/src/components/Main.jsx",["28","29","30","31"],"import React, { Component } from \"react\";\nimport {\n  Checkbox,\n  FormGroup,\n  FormControlLabel,\n  TextField,\n  Button,\n  Typography,\n  Grid,\n} from \"@material-ui/core\";\n\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\n\n// import ClientComponent from \"./ClientComponent\";\n\nimport socketIOClient from \"socket.io-client\";\n// import openSocket from \"socket.io-client\";\nconst ENDPOINT = \"http://192.168.4.26:3001\";\n\nfunction uuidv4() {\n  return \"xxxxxxxx\".replace(/[xy]/g, function (c) {\n    var r = (Math.random() * 16) | 0,\n      v = c === \"x\" ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\nfunction generateUniqueNumber() {\n  return \"xxxxxxxxxxxxxxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n    var r = (Math.random() * 16) | 0,\n      v = c === \"x\" ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      room: \"\",\n      count: 0,\n      loadClient: true,\n      startingScreen: true,\n      createRoomChecked: false,\n      joinRoomChecked: false,\n      roomIdGenerated: false,\n      startGame: false,\n      response: \"\",\n      socketIO: null,\n      id: null,\n      username: \"\",\n      userList: [],\n    };\n  }\n\n  clickButton = (el) => {\n    el.click();\n  };\n\n  countingButtonPress = (event) => {\n    const { startGame } = this.state;\n    if (startGame) {\n      if (event?.keyCode === 32) {\n        this.handleButtonPress();\n      }\n    }\n  };\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.countingButtonPress, false);\n\n    this.setState({ id: generateUniqueNumber() }, () => {\n      this.setState(\n        { socketIO: socketIOClient(ENDPOINT, { transport: [\"websocket\"] }) },\n        () => {\n          this.state.socketIO.on(\"count\", (data) => {\n            this.setState({ count: data });\n          });\n          this.state.socketIO.on(\"userList\", (data) => {\n            this.setState({ userList: data });\n          });\n        }\n      );\n    });\n\n    return () => this.socketIO.disconnect();\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.countingButtonPress, false);\n  }\n\n  joinRoom = () => {\n    const { room, socketIO, username } = this.state;\n    const data = {\n      room: room,\n      username: username,\n    };\n    socketIO.emit(\"room\", data);\n    this.setState({ startGame: true });\n  };\n\n  handleButtonPress = () => {\n    const { id, count, room, socketIO, username } = this.state;\n    // this.setState({ count: count+1});\n\n    const data = {\n      id: id,\n      room: room,\n      message: \"Hello World\",\n      timestamp: Date.now(),\n      username: username,\n    };\n    console.log(data);\n    socketIO.emit(\"buttonPress\", data);\n  };\n\n  render() {\n    const {\n      room,\n      count,\n      loadClient,\n      startingScreen,\n      createRoomChecked,\n      joinRoomChecked,\n      roomIdGenerated,\n      startGame,\n      response,\n      socketIO,\n      username,\n      userList,\n    } = this.state;\n    return (\n      <>\n        {/* <Typography variant=\"h1\">Addiction With Extra Steps</Typography> */}\n        {!startGame ? (\n          <>\n            {startingScreen && (\n              <>\n                <Typography variant=\"h1\" style={{ padding: \"0.5em\" }}>\n                  Clicker.io\n                </Typography>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  size=\"large\"\n                  onClick={() => {\n                    this.setState({ startingScreen: false });\n                  }}\n                >\n                  Start\n                </Button>\n              </>\n            )}\n            {!startingScreen && (\n              <>\n                <TextField\n                  value={username}\n                  autoFocus={true}\n                  // required\n                  error={username === \"\"}\n                  onChange={(event) => {\n                    this.setState({ username: event.target.value });\n                  }}\n                  placeholder={\"Username\"}\n                  style={{\n                    fontFamily: \"Helvetica\",\n                    fontSize: \"32px\",\n                    background: \"#ffffff\",\n                    padding: \"10px 20px 10px 20px\",\n                    // padding: '20px',\n                    margin: \"20px\",\n                    marginTop: \"20px\",\n                    borderRadius: \"12px\",\n                    zIndex: \"100\",\n                  }}\n                />\n                <FormGroup row>\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        checked={createRoomChecked}\n                        onChange={() => {\n                          if (!createRoomChecked && joinRoomChecked) {\n                            this.setState({\n                              joinRoomChecked: !joinRoomChecked,\n                            });\n                          }\n                          this.setState({\n                            createRoomChecked: !createRoomChecked,\n                          });\n                        }}\n                      />\n                    }\n                    label=\"Create Room\"\n                  />\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        checked={joinRoomChecked}\n                        onChange={() => {\n                          if (createRoomChecked && !joinRoomChecked) {\n                            this.setState({\n                              createRoomChecked: !createRoomChecked,\n                            });\n                            // setCreateRoomChecked(!createRoomChecked);\n                          }\n                          this.setState({ joinRoomChecked: !joinRoomChecked });\n                          // setJoinRoomChecked(!joinRoomChecked);\n                        }}\n                      />\n                    }\n                    label=\"Join Room\"\n                  />\n                </FormGroup>\n                {createRoomChecked ? (\n                  <>\n                    <Button\n                      onClick={() => {\n                        this.setState({ room: uuidv4() }, () => {\n                          this.setState({ roomIdGenerated: true }, () => {\n                            this.joinRoom();\n                            // this.setState({startGame: true});\n                          });\n                        });\n                      }}\n                      variant=\"contained\"\n                      color=\"primary\"\n                    >\n                      Generate Room Id\n                    </Button>\n                  </>\n                ) : null}\n                {joinRoomChecked ? (\n                  <>\n                    <TextField\n                      value={room}\n                      autoFocus={true}\n                      helperText={\"Enter Room Id Here...\"}\n                      onChange={(event) => {\n                        this.setState({ room: event.target.value });\n                        // setRoom(event.target.value);\n                      }}\n                      onKeyPress={(ev) => {\n                        if (ev.key === \"Enter\") {\n                          // Do code here\n                          this.joinRoom();\n                          this.setState({ startGame: true });\n                          ev.preventDefault();\n                        }\n                      }}\n                    />\n                    <Button\n                      onClick={() => {\n                        this.joinRoom();\n                        this.setState({ startGame: true });\n                        // setStartGame(true);\n                      }}\n                      variant=\"contained\"\n                      color=\"primary\"\n                    >\n                      Join Room\n                    </Button>\n                  </>\n                ) : null}\n\n                {roomIdGenerated ? (\n                  <>\n                    <Typography>{room}</Typography>\n                    {/* <TextField\n          value={room}\n          disabled={true}\n        /> */}\n                  </>\n                ) : null}\n              </>\n            )}\n          </>\n        ) : null}\n        {startGame ? (\n          <>\n            {/* {userList.map((user) => {\n              return (\n                <Typography variant=\"body\">{`${user}`}</Typography>\n              )\n            })} */}\n            <Grid\n              container\n              spacing={0}\n              align=\"center\"\n              justify=\"center\"\n              direction=\"column\"\n            >\n              <Grid container item xs={12} spacing={0}>\n                <React.Fragment>\n                  {userList.map((user) => {\n                    return (\n                      <Grid\n                        item\n                        xs\n                        align={\"center\"}\n                        alignItems={\"center\"}\n                        justify={\"center\"}\n                      >\n                        <CountdownCircleTimer\n                          isPlaying\n                          duration={10}\n                          strokeWidth={5}\n                          size={60}\n                          colors={[\n                            [\"#004777\", 0.33],\n                            [\"#F7B801\", 0.33],\n                            [\"#A30000\", 0.33],\n                          ]}\n                        >\n                          {({ remainingTime }) => remainingTime}\n                        </CountdownCircleTimer>\n                        <Typography variant=\"body\">{`${user}`}</Typography>\n                      </Grid>\n                    );\n                  })}\n                </React.Fragment>\n              </Grid>\n              <Grid item xs={12}>\n                <Typography>{`Room Id: ${room}`}</Typography>\n                <Typography variant=\"h1\">{count}</Typography>\n                <Button\n                  type=\"submit\"\n                  variant=\"contained\"\n                  color=\"primary\"\n                  ref={this.countingButtonPress}\n                  onClick={() => {\n                    this.handleButtonPress();\n                    // this.setState({count: count+1});\n                    // setCount(count + 1);\n                  }}\n                >\n                  Press Me\n                </Button>\n              </Grid>\n              <Grid item xs={12}></Grid>\n            </Grid>\n          </>\n        ) : null}\n      </>\n    );\n  }\n}\n\nexport default Main;\n",{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":29,"column":8,"nodeType":"38","messageId":"39","endLine":29,"endColumn":12},{"ruleId":"36","severity":1,"message":"40","line":104,"column":17,"nodeType":"38","messageId":"39","endLine":104,"endColumn":22},{"ruleId":"36","severity":1,"message":"41","line":122,"column":7,"nodeType":"38","messageId":"39","endLine":122,"endColumn":17},{"ruleId":"36","severity":1,"message":"42","line":128,"column":7,"nodeType":"38","messageId":"39","endLine":128,"endColumn":15},{"ruleId":"36","severity":1,"message":"43","line":129,"column":7,"nodeType":"38","messageId":"39","endLine":129,"endColumn":15},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'count' is assigned a value but never used.","'loadClient' is assigned a value but never used.","'response' is assigned a value but never used.","'socketIO' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]