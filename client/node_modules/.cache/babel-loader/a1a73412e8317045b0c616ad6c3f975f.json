{"ast":null,"code":"var _jsxFileName = \"/home/wkalim/Documents/University_Courses/CS4483/clicker.io/client/src/components/Main.jsx\";\nimport React, { Component } from \"react\";\nimport { Checkbox, FormGroup, FormControlLabel, TextField, Button, Typography } from \"@material-ui/core\"; // import ClientComponent from \"./ClientComponent\";\n\nimport socketIOClient from \"socket.io-client\"; // import openSocket from \"socket.io-client\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = \"http://192.168.4.26:3001\";\n\nfunction uuidv4() {\n  return \"xxxxxxxx\".replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16 | 0,\n        v = c === \"x\" ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n\nfunction generateUniqueNumber() {\n  return \"xxxxxxxxxxxxxxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16 | 0,\n        v = c === \"x\" ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n\n    this.clickButton = el => {\n      el.click();\n    };\n\n    this.countingButtonPress = event => {\n      const {\n        startGame\n      } = this.state;\n\n      if (startGame) {\n        if (event.keyCode === 32) {\n          this.handleButtonPress();\n        }\n      }\n    };\n\n    this.joinRoom = () => {\n      const {\n        room,\n        socketIO,\n        username\n      } = this.state;\n      const data = {\n        room: room,\n        username: username\n      };\n      socketIO.emit(\"room\", data);\n      this.setState({\n        startGame: true\n      });\n    };\n\n    this.handleButtonPress = () => {\n      const {\n        id,\n        count,\n        room,\n        socketIO,\n        username\n      } = this.state; // this.setState({ count: count+1});\n\n      const data = {\n        id: id,\n        room: room,\n        message: \"Hello World\",\n        timestamp: Date.now(),\n        username: username\n      };\n      console.log(data);\n      socketIO.emit(\"buttonPress\", data);\n    };\n\n    this.state = {\n      room: \"\",\n      count: 0,\n      loadClient: true,\n      startingScreen: true,\n      createRoomChecked: false,\n      joinRoomChecked: false,\n      roomIdGenerated: false,\n      startGame: false,\n      response: \"\",\n      socketIO: null,\n      id: null,\n      username: \"\",\n      userList: []\n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.countingButtonPress, false);\n    this.setState({\n      id: generateUniqueNumber()\n    }, () => {\n      this.setState({\n        socketIO: socketIOClient(ENDPOINT, {\n          transport: [\"websocket\"]\n        })\n      }, () => {\n        this.state.socketIO.on(\"count\", data => {\n          this.setState({\n            count: data\n          });\n        });\n        this.state.socketIO.on(\"userList\", data => {\n          this.setState({\n            userList: data\n          });\n        });\n      });\n    });\n    return () => this.socketIO.disconnect();\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.countingButtonPress, false);\n  }\n\n  render() {\n    const {\n      room,\n      count,\n      loadClient,\n      startingScreen,\n      createRoomChecked,\n      joinRoomChecked,\n      roomIdGenerated,\n      startGame,\n      response,\n      socketIO,\n      username,\n      userList\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [!startGame ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [startingScreen && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h1\",\n            style: {\n              padding: \"0.5em\"\n            },\n            children: \"Clicker.io\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            size: \"large\",\n            onClick: () => {\n              this.setState({\n                startingScreen: false\n              });\n            },\n            children: \"Start\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true), !startingScreen && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            value: username,\n            autoFocus: true // required\n            ,\n            fullWidth: true,\n            error: username === \"\",\n            onChange: event => {\n              this.setState({\n                username: event.target.value\n              });\n            },\n            placeholder: \"Username\",\n            style: {\n              fontFamily: \"Helvetica\",\n              fontSize: \"32px\",\n              background: \"#ffffff\",\n              padding: \"10px 20px 10px 20px\",\n              // padding: '20px',\n              margin: \"20px\",\n              marginTop: \"20px\",\n              borderRadius: \"12px\",\n              zIndex: \"100\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            row: true,\n            children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n              control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                checked: createRoomChecked,\n                onChange: () => {\n                  if (!createRoomChecked && joinRoomChecked) {\n                    this.setState({\n                      joinRoomChecked: !joinRoomChecked\n                    });\n                  }\n\n                  this.setState({\n                    createRoomChecked: !createRoomChecked\n                  });\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 23\n              }, this),\n              label: \"Create Room\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                checked: joinRoomChecked,\n                onChange: () => {\n                  if (createRoomChecked && !joinRoomChecked) {\n                    this.setState({\n                      createRoomChecked: !createRoomChecked\n                    }); // setCreateRoomChecked(!createRoomChecked);\n                  }\n\n                  this.setState({\n                    joinRoomChecked: !joinRoomChecked\n                  }); // setJoinRoomChecked(!joinRoomChecked);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 23\n              }, this),\n              label: \"Join Room\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 17\n          }, this), createRoomChecked ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => {\n                this.setState({\n                  room: uuidv4()\n                }, () => {\n                  this.setState({\n                    roomIdGenerated: true\n                  }, () => {\n                    this.joinRoom(); // this.setState({startGame: true});\n                  });\n                });\n              },\n              variant: \"contained\",\n              color: \"primary\",\n              children: \"Generate Room Id\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 21\n            }, this)\n          }, void 0, false) : null, joinRoomChecked ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              value: room,\n              autoFocus: true,\n              helperText: \"Enter Room Id Here...\",\n              onChange: event => {\n                this.setState({\n                  room: event.target.value\n                }); // setRoom(event.target.value);\n              },\n              onKeyPress: ev => {\n                if (ev.key === \"Enter\") {\n                  // Do code here\n                  this.joinRoom();\n                  this.setState({\n                    startGame: true\n                  });\n                  ev.preventDefault();\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => {\n                this.joinRoom();\n                this.setState({\n                  startGame: true\n                }); // setStartGame(true);\n              },\n              variant: \"contained\",\n              color: \"primary\",\n              children: \"Join Room\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true) : null, roomIdGenerated ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              children: room\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 21\n            }, this)\n          }, void 0, false) : null]\n        }, void 0, true)]\n      }, void 0, true) : null, startGame ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          children: `Room Id: ${room}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h1\",\n          children: count\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"contained\",\n          color: \"primary\",\n          ref: this.countingButtonPress,\n          onClick: () => {\n            this.handleButtonPress(); // this.setState({count: count+1});\n            // setCount(count + 1);\n          },\n          children: \"Press Me\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : null]\n    }, void 0, true);\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["/home/wkalim/Documents/University_Courses/CS4483/clicker.io/client/src/components/Main.jsx"],"names":["React","Component","Checkbox","FormGroup","FormControlLabel","TextField","Button","Typography","socketIOClient","ENDPOINT","uuidv4","replace","c","r","Math","random","v","toString","generateUniqueNumber","Main","constructor","props","clickButton","el","click","countingButtonPress","event","startGame","state","keyCode","handleButtonPress","joinRoom","room","socketIO","username","data","emit","setState","id","count","message","timestamp","Date","now","console","log","loadClient","startingScreen","createRoomChecked","joinRoomChecked","roomIdGenerated","response","userList","componentDidMount","document","addEventListener","transport","on","disconnect","componentWillUnmount","removeEventListener","render","padding","target","value","fontFamily","fontSize","background","margin","marginTop","borderRadius","zIndex","ev","key","preventDefault"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SACEC,QADF,EAEEC,SAFF,EAGEC,gBAHF,EAIEC,SAJF,EAKEC,MALF,EAMEC,UANF,QAOO,mBAPP,C,CASA;;AAEA,OAAOC,cAAP,MAA2B,kBAA3B,C,CACA;;;;AACA,MAAMC,QAAQ,GAAG,0BAAjB;;AAEA,SAASC,MAAT,GAAkB;AAChB,SAAO,WAAWC,OAAX,CAAmB,OAAnB,EAA4B,UAAUC,CAAV,EAAa;AAC9C,QAAIC,CAAC,GAAIC,IAAI,CAACC,MAAL,KAAgB,EAAjB,GAAuB,CAA/B;AAAA,QACEC,CAAC,GAAGJ,CAAC,KAAK,GAAN,GAAYC,CAAZ,GAAiBA,CAAC,GAAG,GAAL,GAAY,GADlC;AAEA,WAAOG,CAAC,CAACC,QAAF,CAAW,EAAX,CAAP;AACD,GAJM,CAAP;AAKD;;AAED,SAASC,oBAAT,GAAgC;AAC9B,SAAO,2BAA2BP,OAA3B,CAAmC,OAAnC,EAA4C,UAAUC,CAAV,EAAa;AAC9D,QAAIC,CAAC,GAAIC,IAAI,CAACC,MAAL,KAAgB,EAAjB,GAAuB,CAA/B;AAAA,QACEC,CAAC,GAAGJ,CAAC,KAAK,GAAN,GAAYC,CAAZ,GAAiBA,CAAC,GAAG,GAAL,GAAY,GADlC;AAEA,WAAOG,CAAC,CAACC,QAAF,CAAW,EAAX,CAAP;AACD,GAJM,CAAP;AAKD;;AAED,MAAME,IAAN,SAAmBlB,SAAnB,CAA6B;AAC3BmB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAmBnBC,WAnBmB,GAmBJC,EAAD,IAAQ;AACpBA,MAAAA,EAAE,CAACC,KAAH;AACD,KArBkB;;AAAA,SAuBnBC,mBAvBmB,GAuBIC,KAAD,IAAW;AAC/B,YAAM;AAAEC,QAAAA;AAAF,UAAgB,KAAKC,KAA3B;;AACA,UAAID,SAAJ,EAAe;AACb,YAAID,KAAK,CAACG,OAAN,KAAkB,EAAtB,EAA0B;AACxB,eAAKC,iBAAL;AACD;AACF;AACF,KA9BkB;;AAAA,SAwDnBC,QAxDmB,GAwDR,MAAM;AACf,YAAM;AAAEC,QAAAA,IAAF;AAAQC,QAAAA,QAAR;AAAkBC,QAAAA;AAAlB,UAA+B,KAAKN,KAA1C;AACA,YAAMO,IAAI,GAAG;AACXH,QAAAA,IAAI,EAAEA,IADK;AAEXE,QAAAA,QAAQ,EAAEA;AAFC,OAAb;AAIAD,MAAAA,QAAQ,CAACG,IAAT,CAAc,MAAd,EAAsBD,IAAtB;AACA,WAAKE,QAAL,CAAc;AAAEV,QAAAA,SAAS,EAAE;AAAb,OAAd;AACD,KAhEkB;;AAAA,SAkEnBG,iBAlEmB,GAkEC,MAAM;AACxB,YAAM;AAAEQ,QAAAA,EAAF;AAAMC,QAAAA,KAAN;AAAaP,QAAAA,IAAb;AAAmBC,QAAAA,QAAnB;AAA6BC,QAAAA;AAA7B,UAA0C,KAAKN,KAArD,CADwB,CAExB;;AAEA,YAAMO,IAAI,GAAG;AACXG,QAAAA,EAAE,EAAEA,EADO;AAEXN,QAAAA,IAAI,EAAEA,IAFK;AAGXQ,QAAAA,OAAO,EAAE,aAHE;AAIXC,QAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL,EAJA;AAKXT,QAAAA,QAAQ,EAAEA;AALC,OAAb;AAOAU,MAAAA,OAAO,CAACC,GAAR,CAAYV,IAAZ;AACAF,MAAAA,QAAQ,CAACG,IAAT,CAAc,aAAd,EAA6BD,IAA7B;AACD,KA/EkB;;AAEjB,SAAKP,KAAL,GAAa;AACXI,MAAAA,IAAI,EAAE,EADK;AAEXO,MAAAA,KAAK,EAAE,CAFI;AAGXO,MAAAA,UAAU,EAAE,IAHD;AAIXC,MAAAA,cAAc,EAAE,IAJL;AAKXC,MAAAA,iBAAiB,EAAE,KALR;AAMXC,MAAAA,eAAe,EAAE,KANN;AAOXC,MAAAA,eAAe,EAAE,KAPN;AAQXvB,MAAAA,SAAS,EAAE,KARA;AASXwB,MAAAA,QAAQ,EAAE,EATC;AAUXlB,MAAAA,QAAQ,EAAE,IAVC;AAWXK,MAAAA,EAAE,EAAE,IAXO;AAYXJ,MAAAA,QAAQ,EAAE,EAZC;AAaXkB,MAAAA,QAAQ,EAAE;AAbC,KAAb;AAeD;;AAeDC,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,EAAqC,KAAK9B,mBAA1C,EAA+D,KAA/D;AAEA,SAAKY,QAAL,CAAc;AAAEC,MAAAA,EAAE,EAAEpB,oBAAoB;AAA1B,KAAd,EAA8C,MAAM;AAClD,WAAKmB,QAAL,CACE;AAAEJ,QAAAA,QAAQ,EAAEzB,cAAc,CAACC,QAAD,EAAW;AAAE+C,UAAAA,SAAS,EAAE,CAAC,WAAD;AAAb,SAAX;AAA1B,OADF,EAEE,MAAM;AACJ,aAAK5B,KAAL,CAAWK,QAAX,CAAoBwB,EAApB,CAAuB,OAAvB,EAAiCtB,IAAD,IAAU;AACxC,eAAKE,QAAL,CAAc;AAAEE,YAAAA,KAAK,EAAEJ;AAAT,WAAd;AACD,SAFD;AAGA,aAAKP,KAAL,CAAWK,QAAX,CAAoBwB,EAApB,CAAuB,UAAvB,EAAoCtB,IAAD,IAAU;AAC3C,eAAKE,QAAL,CAAc;AAAEe,YAAAA,QAAQ,EAAEjB;AAAZ,WAAd;AACD,SAFD;AAGD,OATH;AAWD,KAZD;AAcA,WAAO,MAAM,KAAKF,QAAL,CAAcyB,UAAd,EAAb;AACD;;AAEDC,EAAAA,oBAAoB,GAAG;AACrBL,IAAAA,QAAQ,CAACM,mBAAT,CAA6B,SAA7B,EAAwC,KAAKnC,mBAA7C,EAAkE,KAAlE;AACD;;AA2BDoC,EAAAA,MAAM,GAAG;AACP,UAAM;AACJ7B,MAAAA,IADI;AAEJO,MAAAA,KAFI;AAGJO,MAAAA,UAHI;AAIJC,MAAAA,cAJI;AAKJC,MAAAA,iBALI;AAMJC,MAAAA,eANI;AAOJC,MAAAA,eAPI;AAQJvB,MAAAA,SARI;AASJwB,MAAAA,QATI;AAUJlB,MAAAA,QAVI;AAWJC,MAAAA,QAXI;AAYJkB,MAAAA;AAZI,QAaF,KAAKxB,KAbT;AAcA,wBACE;AAAA,iBAEG,CAACD,SAAD,gBACC;AAAA,mBACGoB,cAAc,iBACb;AAAA,kCACE,QAAC,UAAD;AAAY,YAAA,OAAO,EAAC,IAApB;AAAyB,YAAA,KAAK,EAAE;AAAEe,cAAAA,OAAO,EAAE;AAAX,aAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAIE,QAAC,MAAD;AACE,YAAA,OAAO,EAAC,WADV;AAEE,YAAA,KAAK,EAAC,SAFR;AAGE,YAAA,IAAI,EAAC,OAHP;AAIE,YAAA,OAAO,EAAE,MAAM;AACb,mBAAKzB,QAAL,CAAc;AAAEU,gBAAAA,cAAc,EAAE;AAAlB,eAAd;AACD,aANH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF;AAAA,wBAFJ,EAkBG,CAACA,cAAD,iBACC;AAAA,kCACE,QAAC,SAAD;AACE,YAAA,KAAK,EAAEb,QADT;AAEE,YAAA,SAAS,EAAE,IAFb,CAGE;AAHF;AAIE,YAAA,SAAS,EAAE,IAJb;AAKE,YAAA,KAAK,EAAEA,QAAQ,KAAK,EALtB;AAME,YAAA,QAAQ,EAAGR,KAAD,IAAW;AACnB,mBAAKW,QAAL,CAAc;AAAEH,gBAAAA,QAAQ,EAAER,KAAK,CAACqC,MAAN,CAAaC;AAAzB,eAAd;AACD,aARH;AASE,YAAA,WAAW,EAAE,UATf;AAUE,YAAA,KAAK,EAAE;AACLC,cAAAA,UAAU,EAAE,WADP;AAELC,cAAAA,QAAQ,EAAE,MAFL;AAGLC,cAAAA,UAAU,EAAE,SAHP;AAILL,cAAAA,OAAO,EAAE,qBAJJ;AAKL;AACAM,cAAAA,MAAM,EAAE,MANH;AAOLC,cAAAA,SAAS,EAAE,MAPN;AAQLC,cAAAA,YAAY,EAAE,MART;AASLC,cAAAA,MAAM,EAAE;AATH;AAVT;AAAA;AAAA;AAAA;AAAA,kBADF,eAuBE,QAAC,SAAD;AAAW,YAAA,GAAG,MAAd;AAAA,oCACE,QAAC,gBAAD;AACE,cAAA,OAAO,eACL,QAAC,QAAD;AACE,gBAAA,OAAO,EAAEvB,iBADX;AAEE,gBAAA,QAAQ,EAAE,MAAM;AACd,sBAAI,CAACA,iBAAD,IAAsBC,eAA1B,EAA2C;AACzC,yBAAKZ,QAAL,CAAc;AACZY,sBAAAA,eAAe,EAAE,CAACA;AADN,qBAAd;AAGD;;AACD,uBAAKZ,QAAL,CAAc;AACZW,oBAAAA,iBAAiB,EAAE,CAACA;AADR,mBAAd;AAGD;AAXH;AAAA;AAAA;AAAA;AAAA,sBAFJ;AAgBE,cAAA,KAAK,EAAC;AAhBR;AAAA;AAAA;AAAA;AAAA,oBADF,eAmBE,QAAC,gBAAD;AACE,cAAA,OAAO,eACL,QAAC,QAAD;AACE,gBAAA,OAAO,EAAEC,eADX;AAEE,gBAAA,QAAQ,EAAE,MAAM;AACd,sBAAID,iBAAiB,IAAI,CAACC,eAA1B,EAA2C;AACzC,yBAAKZ,QAAL,CAAc;AACZW,sBAAAA,iBAAiB,EAAE,CAACA;AADR,qBAAd,EADyC,CAIzC;AACD;;AACD,uBAAKX,QAAL,CAAc;AAAEY,oBAAAA,eAAe,EAAE,CAACA;AAApB,mBAAd,EAPc,CAQd;AACD;AAXH;AAAA;AAAA;AAAA;AAAA,sBAFJ;AAgBE,cAAA,KAAK,EAAC;AAhBR;AAAA;AAAA;AAAA;AAAA,oBAnBF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAvBF,EA6DGD,iBAAiB,gBAChB;AAAA,mCACE,QAAC,MAAD;AACE,cAAA,OAAO,EAAE,MAAM;AACb,qBAAKX,QAAL,CAAc;AAAEL,kBAAAA,IAAI,EAAEtB,MAAM;AAAd,iBAAd,EAAkC,MAAM;AACtC,uBAAK2B,QAAL,CAAc;AAAEa,oBAAAA,eAAe,EAAE;AAAnB,mBAAd,EAAyC,MAAM;AAC7C,yBAAKnB,QAAL,GAD6C,CAE7C;AACD,mBAHD;AAID,iBALD;AAMD,eARH;AASE,cAAA,OAAO,EAAC,WATV;AAUE,cAAA,KAAK,EAAC,SAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,2BADgB,GAiBd,IA9EN,EA+EGkB,eAAe,gBACd;AAAA,oCACE,QAAC,SAAD;AACE,cAAA,KAAK,EAAEjB,IADT;AAEE,cAAA,SAAS,EAAE,IAFb;AAGE,cAAA,UAAU,EAAE,uBAHd;AAIE,cAAA,QAAQ,EAAGN,KAAD,IAAW;AACnB,qBAAKW,QAAL,CAAc;AAAEL,kBAAAA,IAAI,EAAEN,KAAK,CAACqC,MAAN,CAAaC;AAArB,iBAAd,EADmB,CAEnB;AACD,eAPH;AAQE,cAAA,UAAU,EAAGQ,EAAD,IAAQ;AAClB,oBAAIA,EAAE,CAACC,GAAH,KAAW,OAAf,EAAwB;AACtB;AACA,uBAAK1C,QAAL;AACA,uBAAKM,QAAL,CAAc;AAAEV,oBAAAA,SAAS,EAAE;AAAb,mBAAd;AACA6C,kBAAAA,EAAE,CAACE,cAAH;AACD;AACF;AAfH;AAAA;AAAA;AAAA;AAAA,oBADF,eAkBE,QAAC,MAAD;AACE,cAAA,OAAO,EAAE,MAAM;AACb,qBAAK3C,QAAL;AACA,qBAAKM,QAAL,CAAc;AAAEV,kBAAAA,SAAS,EAAE;AAAb,iBAAd,EAFa,CAGb;AACD,eALH;AAME,cAAA,OAAO,EAAC,WANV;AAOE,cAAA,KAAK,EAAC,SAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAlBF;AAAA,0BADc,GA+BZ,IA9GN,EAgHGuB,eAAe,gBACd;AAAA,mCACE,QAAC,UAAD;AAAA,wBAAalB;AAAb;AAAA;AAAA;AAAA;AAAA;AADF,2BADc,GAQZ,IAxHN;AAAA,wBAnBJ;AAAA,sBADD,GAgJG,IAlJN,EAmJGL,SAAS,gBACR;AAAA,gCAME,QAAC,UAAD;AAAA,oBAAc,YAAWK,IAAK;AAA9B;AAAA;AAAA;AAAA;AAAA,gBANF,eAOE,QAAC,UAAD;AAAY,UAAA,OAAO,EAAC,IAApB;AAAA,oBAA0BO;AAA1B;AAAA;AAAA;AAAA;AAAA,gBAPF,eAQE,QAAC,MAAD;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,OAAO,EAAC,WAFV;AAGE,UAAA,KAAK,EAAC,SAHR;AAIE,UAAA,GAAG,EAAE,KAAKd,mBAJZ;AAKE,UAAA,OAAO,EAAE,MAAM;AACb,iBAAKK,iBAAL,GADa,CAEb;AACA;AACD,WATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARF;AAAA,sBADQ,GAuBN,IA1KN;AAAA,oBADF;AA8KD;;AA/Q0B;;AAkR7B,eAAeX,IAAf","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  Checkbox,\n  FormGroup,\n  FormControlLabel,\n  TextField,\n  Button,\n  Typography,\n} from \"@material-ui/core\";\n\n// import ClientComponent from \"./ClientComponent\";\n\nimport socketIOClient from \"socket.io-client\";\n// import openSocket from \"socket.io-client\";\nconst ENDPOINT = \"http://192.168.4.26:3001\";\n\nfunction uuidv4() {\n  return \"xxxxxxxx\".replace(/[xy]/g, function (c) {\n    var r = (Math.random() * 16) | 0,\n      v = c === \"x\" ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\nfunction generateUniqueNumber() {\n  return \"xxxxxxxxxxxxxxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n    var r = (Math.random() * 16) | 0,\n      v = c === \"x\" ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      room: \"\",\n      count: 0,\n      loadClient: true,\n      startingScreen: true,\n      createRoomChecked: false,\n      joinRoomChecked: false,\n      roomIdGenerated: false,\n      startGame: false,\n      response: \"\",\n      socketIO: null,\n      id: null,\n      username: \"\",\n      userList: [],\n    };\n  }\n\n  clickButton = (el) => {\n    el.click();\n  };\n\n  countingButtonPress = (event) => {\n    const { startGame } = this.state;\n    if (startGame) {\n      if (event.keyCode === 32) {\n        this.handleButtonPress();\n      }\n    }\n  };\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.countingButtonPress, false);\n\n    this.setState({ id: generateUniqueNumber() }, () => {\n      this.setState(\n        { socketIO: socketIOClient(ENDPOINT, { transport: [\"websocket\"] }) },\n        () => {\n          this.state.socketIO.on(\"count\", (data) => {\n            this.setState({ count: data });\n          });\n          this.state.socketIO.on(\"userList\", (data) => {\n            this.setState({ userList: data });\n          });\n        }\n      );\n    });\n\n    return () => this.socketIO.disconnect();\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.countingButtonPress, false);\n  }\n\n  joinRoom = () => {\n    const { room, socketIO, username } = this.state;\n    const data = {\n      room: room,\n      username: username,\n    };\n    socketIO.emit(\"room\", data);\n    this.setState({ startGame: true });\n  };\n\n  handleButtonPress = () => {\n    const { id, count, room, socketIO, username } = this.state;\n    // this.setState({ count: count+1});\n\n    const data = {\n      id: id,\n      room: room,\n      message: \"Hello World\",\n      timestamp: Date.now(),\n      username: username,\n    };\n    console.log(data);\n    socketIO.emit(\"buttonPress\", data);\n  };\n\n  render() {\n    const {\n      room,\n      count,\n      loadClient,\n      startingScreen,\n      createRoomChecked,\n      joinRoomChecked,\n      roomIdGenerated,\n      startGame,\n      response,\n      socketIO,\n      username,\n      userList,\n    } = this.state;\n    return (\n      <>\n        {/* <Typography variant=\"h1\">Addiction With Extra Steps</Typography> */}\n        {!startGame ? (\n          <>\n            {startingScreen && (\n              <>\n                <Typography variant=\"h1\" style={{ padding: \"0.5em\" }}>\n                  Clicker.io\n                </Typography>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  size=\"large\"\n                  onClick={() => {\n                    this.setState({ startingScreen: false });\n                  }}\n                >\n                  Start\n                </Button>\n              </>\n            )}\n            {!startingScreen && (\n              <>\n                <TextField\n                  value={username}\n                  autoFocus={true}\n                  // required\n                  fullWidth={true}\n                  error={username === \"\"}\n                  onChange={(event) => {\n                    this.setState({ username: event.target.value });\n                  }}\n                  placeholder={\"Username\"}\n                  style={{\n                    fontFamily: \"Helvetica\",\n                    fontSize: \"32px\",\n                    background: \"#ffffff\",\n                    padding: \"10px 20px 10px 20px\",\n                    // padding: '20px',\n                    margin: \"20px\",\n                    marginTop: \"20px\",\n                    borderRadius: \"12px\",\n                    zIndex: \"100\",\n                  }}\n                />\n                <FormGroup row>\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        checked={createRoomChecked}\n                        onChange={() => {\n                          if (!createRoomChecked && joinRoomChecked) {\n                            this.setState({\n                              joinRoomChecked: !joinRoomChecked,\n                            });\n                          }\n                          this.setState({\n                            createRoomChecked: !createRoomChecked,\n                          });\n                        }}\n                      />\n                    }\n                    label=\"Create Room\"\n                  />\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        checked={joinRoomChecked}\n                        onChange={() => {\n                          if (createRoomChecked && !joinRoomChecked) {\n                            this.setState({\n                              createRoomChecked: !createRoomChecked,\n                            });\n                            // setCreateRoomChecked(!createRoomChecked);\n                          }\n                          this.setState({ joinRoomChecked: !joinRoomChecked });\n                          // setJoinRoomChecked(!joinRoomChecked);\n                        }}\n                      />\n                    }\n                    label=\"Join Room\"\n                  />\n                </FormGroup>\n                {createRoomChecked ? (\n                  <>\n                    <Button\n                      onClick={() => {\n                        this.setState({ room: uuidv4() }, () => {\n                          this.setState({ roomIdGenerated: true }, () => {\n                            this.joinRoom();\n                            // this.setState({startGame: true});\n                          });\n                        });\n                      }}\n                      variant=\"contained\"\n                      color=\"primary\"\n                    >\n                      Generate Room Id\n                    </Button>\n                  </>\n                ) : null}\n                {joinRoomChecked ? (\n                  <>\n                    <TextField\n                      value={room}\n                      autoFocus={true}\n                      helperText={\"Enter Room Id Here...\"}\n                      onChange={(event) => {\n                        this.setState({ room: event.target.value });\n                        // setRoom(event.target.value);\n                      }}\n                      onKeyPress={(ev) => {\n                        if (ev.key === \"Enter\") {\n                          // Do code here\n                          this.joinRoom();\n                          this.setState({ startGame: true });\n                          ev.preventDefault();\n                        }\n                      }}\n                    />\n                    <Button\n                      onClick={() => {\n                        this.joinRoom();\n                        this.setState({ startGame: true });\n                        // setStartGame(true);\n                      }}\n                      variant=\"contained\"\n                      color=\"primary\"\n                    >\n                      Join Room\n                    </Button>\n                  </>\n                ) : null}\n\n                {roomIdGenerated ? (\n                  <>\n                    <Typography>{room}</Typography>\n                    {/* <TextField\n          value={room}\n          disabled={true}\n        /> */}\n                  </>\n                ) : null}\n              </>\n            )}\n          </>\n        ) : null}\n        {startGame ? (\n          <>\n            {/* {userList.map((user) => {\n              return (\n                <Typography variant=\"body\">{`${user}`}</Typography>\n              )\n            })} */}\n            <Typography>{`Room Id: ${room}`}</Typography>\n            <Typography variant=\"h1\">{count}</Typography>\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              ref={this.countingButtonPress}\n              onClick={() => {\n                this.handleButtonPress();\n                // this.setState({count: count+1});\n                // setCount(count + 1);\n              }}\n            >\n              Press Me\n            </Button>\n          </>\n        ) : null}\n      </>\n    );\n  }\n}\n\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}