{"ast":null,"code":"var _jsxFileName = \"/home/wkalim/Documents/University_Courses/CS4483/clicker.io/client/src/components/GameScreen.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Grid, Typography, Button } from \"@material-ui/core\";\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\nimport { DataGrid } from '@material-ui/data-grid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction GameScreen(props) {\n  _s();\n\n  const [buttonDisabled, setButtonDisabled] = useState(false);\n  const {\n    id,\n    count,\n    room,\n    socketIO,\n    username,\n    users,\n    startGame\n  } = props;\n  const pageSize = 5;\n  useEffect(() => {\n    setButtonDisabled(!buttonDisabled);\n  }, [count]);\n  useEffect(() => {\n    document.addEventListener(\"keydown\", countingButtonPress, false);\n    return () => {\n      document.removeEventListener(\"keydown\", countingButtonPress, false);\n    };\n  }, []);\n  console.log(\"Users\");\n  console.log(users);\n  const columns = [{\n    field: 'username',\n    headerName: 'Name',\n    width: 70\n  }, {\n    field: 'score',\n    headerName: 'Score',\n    width: 70\n  }, {\n    field: 'timeRemaining',\n    headerName: 'Timer',\n    width: 70\n  }];\n  const rows = users.map(user => {\n    console.log(user);\n    const row = {\n      // username: user.getName(),\n      // score: user.getScore(),\n      // timeRemaining: user.getTimeRemaining(),\n      username: \"\",\n      score: \"\",\n      timeRemaining: \"\"\n    };\n    return row;\n  });\n\n  const countingButtonPress = event => {\n    if (startGame) {\n      if ((event === null || event === void 0 ? void 0 : event.keyCode) === 32) {\n        handleButtonPress();\n      }\n    }\n  };\n\n  const handleButtonPress = () => {\n    const data = {\n      id: id,\n      room: room,\n      message: \"Hello World\",\n      timestamp: Date.now(),\n      username: username\n    };\n    console.log(\"data\");\n    console.log(data);\n    socketIO.emit(\"buttonPress\", data);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 0,\n      align: \"center\",\n      justify: \"center\",\n      direction: \"column\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        item: true,\n        xs: 12,\n        spacing: 0,\n        children: /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: users.map(user => {\n            return /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: true,\n              align: \"center\",\n              alignItems: \"center\",\n              justify: \"center\",\n              children: [/*#__PURE__*/_jsxDEV(CountdownCircleTimer, {\n                isPlaying: true,\n                duration: 10,\n                strokeWidth: 5,\n                size: 60,\n                colors: [[\"#004777\", 0.33], [\"#F7B801\", 0.33], [\"#A30000\", 0.33]],\n                children: ({\n                  remainingTime\n                }) => remainingTime\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body\",\n                children: `${user}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          children: `Room Id: ${room}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h1\",\n          children: count\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"contained\",\n          color: \"primary\",\n          ref: countingButtonPress,\n          onClick: () => {\n            handleButtonPress();\n          },\n          children: \"Press Me\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(GameScreen, \"MJoOo1H0+tpQJVVyFFhuCDprdpA=\");\n\n_c = GameScreen;\nexport default GameScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"GameScreen\");","map":{"version":3,"sources":["/home/wkalim/Documents/University_Courses/CS4483/clicker.io/client/src/components/GameScreen.jsx"],"names":["React","useState","useEffect","Grid","Typography","Button","CountdownCircleTimer","DataGrid","GameScreen","props","buttonDisabled","setButtonDisabled","id","count","room","socketIO","username","users","startGame","pageSize","document","addEventListener","countingButtonPress","removeEventListener","console","log","columns","field","headerName","width","rows","map","user","row","score","timeRemaining","event","keyCode","handleButtonPress","data","message","timestamp","Date","now","emit","remainingTime"],"mappings":";;;AAAA,OAAOA,KAAP,IACEC,QADF,EAEEC,SAFF,QAGO,OAHP;AAIA,SACEC,IADF,EAEEC,UAFF,EAGEC,MAHF,QAIO,mBAJP;AAKA,SACEC,oBADF,QAEO,8BAFP;AAIA,SAASC,QAAT,QAAyB,wBAAzB;;;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAAA;;AACzB,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCV,QAAQ,CAAC,KAAD,CAApD;AAEA,QAAM;AAAEW,IAAAA,EAAF;AAAMC,IAAAA,KAAN;AAAaC,IAAAA,IAAb;AAAmBC,IAAAA,QAAnB;AAA6BC,IAAAA,QAA7B;AAAuCC,IAAAA,KAAvC;AAA8CC,IAAAA;AAA9C,MAA4DT,KAAlE;AACA,QAAMU,QAAQ,GAAG,CAAjB;AAEAjB,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,iBAAiB,CAAC,CAACD,cAAF,CAAjB;AACD,GAFQ,EAEN,CAACG,KAAD,CAFM,CAAT;AAIAX,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,EAAqCC,mBAArC,EAA0D,KAA1D;AAEA,WAAO,MAAM;AACXF,MAAAA,QAAQ,CAACG,mBAAT,CAA6B,SAA7B,EAAwCD,mBAAxC,EAA6D,KAA7D;AACD,KAFD;AAGD,GANQ,EAMN,EANM,CAAT;AAQAE,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYR,KAAZ;AAEA,QAAMS,OAAO,GAAG,CACd;AAACC,IAAAA,KAAK,EAAE,UAAR;AAAoBC,IAAAA,UAAU,EAAE,MAAhC;AAAwCC,IAAAA,KAAK,EAAE;AAA/C,GADc,EAEd;AAACF,IAAAA,KAAK,EAAE,OAAR;AAAiBC,IAAAA,UAAU,EAAE,OAA7B;AAAsCC,IAAAA,KAAK,EAAE;AAA7C,GAFc,EAGd;AAACF,IAAAA,KAAK,EAAE,eAAR;AAAyBC,IAAAA,UAAU,EAAE,OAArC;AAA8CC,IAAAA,KAAK,EAAE;AAArD,GAHc,CAAhB;AAKA,QAAMC,IAAI,GAAGb,KAAK,CAACc,GAAN,CAAWC,IAAD,IAAU;AAC/BR,IAAAA,OAAO,CAACC,GAAR,CAAYO,IAAZ;AAEA,UAAMC,GAAG,GAAG;AACV;AACA;AACA;AACAjB,MAAAA,QAAQ,EAAE,EAJA;AAKVkB,MAAAA,KAAK,EAAE,EALG;AAMVC,MAAAA,aAAa,EAAE;AANL,KAAZ;AAQA,WAAOF,GAAP;AACD,GAZY,CAAb;;AAcA,QAAMX,mBAAmB,GAAIc,KAAD,IAAW;AACrC,QAAIlB,SAAJ,EAAe;AACb,UAAI,CAAAkB,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEC,OAAP,MAAmB,EAAvB,EAA2B;AACzBC,QAAAA,iBAAiB;AAClB;AACF;AACF,GAND;;AAQA,QAAMA,iBAAiB,GAAG,MAAM;AAC9B,UAAMC,IAAI,GAAG;AACX3B,MAAAA,EAAE,EAAEA,EADO;AAEXE,MAAAA,IAAI,EAAEA,IAFK;AAGX0B,MAAAA,OAAO,EAAE,aAHE;AAIXC,MAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL,EAJA;AAKX3B,MAAAA,QAAQ,EAAEA;AALC,KAAb;AAQAQ,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYc,IAAZ;AACAxB,IAAAA,QAAQ,CAAC6B,IAAT,CAAc,aAAd,EAA6BL,IAA7B;AACD,GAZD;;AAcA,sBACE;AAAA,2BACE,QAAC,IAAD;AACE,MAAA,SAAS,MADX;AAEE,MAAA,OAAO,EAAE,CAFX;AAGE,MAAA,KAAK,EAAC,QAHR;AAIE,MAAA,OAAO,EAAC,QAJV;AAKE,MAAA,SAAS,EAAC,QALZ;AAAA,8BAOE,QAAC,IAAD;AAAM,QAAA,SAAS,MAAf;AAAgB,QAAA,IAAI,MAApB;AAAqB,QAAA,EAAE,EAAE,EAAzB;AAA6B,QAAA,OAAO,EAAE,CAAtC;AAAA,+BACE,QAAC,KAAD,CAAO,QAAP;AAAA,oBAEGtB,KAAK,CAACc,GAAN,CAAWC,IAAD,IAAU;AACnB,gCACE,QAAC,IAAD;AACE,cAAA,IAAI,MADN;AAEE,cAAA,EAAE,MAFJ;AAGE,cAAA,KAAK,EAAE,QAHT;AAIE,cAAA,UAAU,EAAE,QAJd;AAKE,cAAA,OAAO,EAAE,QALX;AAAA,sCAOE,QAAC,oBAAD;AACE,gBAAA,SAAS,MADX;AAEE,gBAAA,QAAQ,EAAE,EAFZ;AAGE,gBAAA,WAAW,EAAE,CAHf;AAIE,gBAAA,IAAI,EAAE,EAJR;AAKE,gBAAA,MAAM,EAAE,CACN,CAAC,SAAD,EAAY,IAAZ,CADM,EAEN,CAAC,SAAD,EAAY,IAAZ,CAFM,EAGN,CAAC,SAAD,EAAY,IAAZ,CAHM,CALV;AAAA,0BAWG,CAAC;AAAEa,kBAAAA;AAAF,iBAAD,KAAuBA;AAX1B;AAAA;AAAA;AAAA;AAAA,sBAPF,eAoBE,QAAC,UAAD;AAAY,gBAAA,OAAO,EAAC,MAApB;AAAA,0BAA6B,GAAEb,IAAK;AAApC;AAAA;AAAA;AAAA;AAAA,sBApBF;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF;AAwBD,WAzBA;AAFH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAPF,eAsCE,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,EAAf;AAAA,gCACE,QAAC,UAAD;AAAA,oBAAc,YAAWlB,IAAK;AAA9B;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,UAAD;AAAY,UAAA,OAAO,EAAC,IAApB;AAAA,oBAA0BD;AAA1B;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE,QAAC,MAAD;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,OAAO,EAAC,WAFV;AAGE,UAAA,KAAK,EAAC,SAHR;AAIE,UAAA,GAAG,EAAES,mBAJP;AAKE,UAAA,OAAO,EAAE,MAAM;AACbgB,YAAAA,iBAAiB;AAClB,WAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cAtCF,eAqDE,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE;AAAf;AAAA;AAAA;AAAA;AAAA,cArDF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AA2DD;;GAzHQ9B,U;;KAAAA,U;AA2HT,eAAeA,UAAf","sourcesContent":["import React, {\n  useState,\n  useEffect\n} from \"react\";\nimport {\n  Grid,\n  Typography,\n  Button\n} from \"@material-ui/core\";\nimport {\n  CountdownCircleTimer\n} from \"react-countdown-circle-timer\";\n\nimport { DataGrid } from '@material-ui/data-grid';\n\nfunction GameScreen(props) {\n  const [buttonDisabled, setButtonDisabled] = useState(false);\n\n  const { id, count, room, socketIO, username, users, startGame } = props;\n  const pageSize = 5;\n\n  useEffect(() => {\n    setButtonDisabled(!buttonDisabled);\n  }, [count])\n\n  useEffect(() => {\n    document.addEventListener(\"keydown\", countingButtonPress, false);\n\n    return () => {\n      document.removeEventListener(\"keydown\", countingButtonPress, false);\n    };\n  }, []);\n\n  console.log(\"Users\");\n  console.log(users);\n\n  const columns = [\n    {field: 'username', headerName: 'Name', width: 70},\n    {field: 'score', headerName: 'Score', width: 70},\n    {field: 'timeRemaining', headerName: 'Timer', width: 70}\n  ]\n  const rows = users.map((user) => {\n    console.log(user);\n    \n    const row = {\n      // username: user.getName(),\n      // score: user.getScore(),\n      // timeRemaining: user.getTimeRemaining(),\n      username: \"\",\n      score: \"\",\n      timeRemaining: \"\"\n    }\n    return row;\n  })\n\n  const countingButtonPress = (event) => {\n    if (startGame) {\n      if (event?.keyCode === 32) {\n        handleButtonPress();\n      }\n    }\n  };\n\n  const handleButtonPress = () => {\n    const data = {\n      id: id,\n      room: room,\n      message: \"Hello World\",\n      timestamp: Date.now(),\n      username: username,\n    };\n\n    console.log(\"data\");\n    console.log(data);\n    socketIO.emit(\"buttonPress\", data);\n  };\n\n  return (\n    <>\n      <Grid\n        container\n        spacing={0}\n        align=\"center\"\n        justify=\"center\"\n        direction=\"column\"\n      >\n        <Grid container item xs={12} spacing={0}>\n          <React.Fragment>\n            {/* <DataGrid rows={rows} columns={columns} pageSize={pageSize}/> */}\n            {users.map((user) => {\n              return (\n                <Grid\n                  item\n                  xs\n                  align={\"center\"}\n                  alignItems={\"center\"}\n                  justify={\"center\"}\n                >\n                  <CountdownCircleTimer\n                    isPlaying\n                    duration={10}\n                    strokeWidth={5}\n                    size={60}\n                    colors={[\n                      [\"#004777\", 0.33],\n                      [\"#F7B801\", 0.33],\n                      [\"#A30000\", 0.33],\n                    ]}\n                  >\n                    {({ remainingTime }) => remainingTime}\n                  </CountdownCircleTimer>\n                  <Typography variant=\"body\">{`${user}`}</Typography>\n                </Grid>\n              );\n            })}\n          </React.Fragment>\n        </Grid>\n        <Grid item xs={12}>\n          <Typography>{`Room Id: ${room}`}</Typography>\n          <Typography variant=\"h1\">{count}</Typography>\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            ref={countingButtonPress}\n            onClick={() => {\n              handleButtonPress();\n            }}\n          >\n            Press Me\n          </Button>\n        </Grid>\n        <Grid item xs={12}></Grid>\n      </Grid>\n    </>\n  );\n}\n\nexport default GameScreen;\n"]},"metadata":{},"sourceType":"module"}