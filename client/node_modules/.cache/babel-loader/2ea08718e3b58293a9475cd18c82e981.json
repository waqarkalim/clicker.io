{"ast":null,"code":"var _jsxFileName = \"/home/wkalim/Documents/University_Courses/CS4483/clicker.io/client/src/components/GameScreen.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Grid, Typography, Button, Table, TableBody, TableCell, TableHead, TableRow, Paper } from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\nimport { DataGrid } from \"@material-ui/data-grid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst styles = {\n  root: {\n    width: \"100%\",\n    overflowX: \"auto\"\n  },\n  table: {\n    minWidth: 700\n  }\n};\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary\n  }\n}));\n\nfunction GameScreen(props) {\n  _s();\n\n  const classes = useStyles();\n  const {\n    id,\n    count,\n    room,\n    socketIO,\n    username,\n    users,\n    startGame\n  } = props;\n  const pageSize = 5; // useEffect(() => {\n  //   document.addEventListener(\"keydown\", countingButtonPress, false);\n  //   return () => {\n  //     document.removeEventListener(\"keydown\", countingButtonPress, false);\n  //   };\n  // }, []);\n\n  console.log(\"Users\");\n  console.log(users);\n  const columns = [{\n    field: \"id\",\n    headerName: \"ID\",\n    width: 100\n  }, {\n    field: \"username\",\n    headerName: \"Name\",\n    width: 100\n  }, {\n    field: \"score\",\n    headerName: \"Score\",\n    width: 100\n  }, {\n    field: \"timeRemaining\",\n    headerName: \"Timer\",\n    width: 100\n  }];\n  const rows = users.map((user, index) => {\n    console.log(user);\n    const row = {\n      id: index + 1,\n      username: user.name,\n      score: user.score,\n      timeRemaining: user.timeRemaining\n    };\n    return row;\n  }); // const countingButtonPress = (event) => {\n  //   if (startGame) {\n  //     if (event?.keyCode === 32) {\n  //       handleButtonPress();\n  //     }\n  //   }\n  // };\n\n  console.log(\"rows\");\n  console.log(rows);\n\n  const handleButtonPress = () => {\n    const data = {\n      id: id,\n      room: room,\n      message: \"Hello World\",\n      timestamp: Date.now(),\n      username: username\n    };\n    console.log(\"data\");\n    console.log(data);\n    socketIO.emit(\"buttonPress\", data);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 0,\n      align: \"center\",\n      justify: \"center\",\n      direction: \"column\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        item: true,\n        xs: 12,\n        spacing: 0,\n        children: /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Paper, {\n            style: styles.root,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              spacing: 0,\n              children: users.map(user => {\n                return /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    xs: 4,\n                    children: /*#__PURE__*/_jsxDEV(Paper, {\n                      className: classes.paper,\n                      children: user.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 117,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 116,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    xs: 4,\n                    children: /*#__PURE__*/_jsxDEV(Paper, {\n                      className: classes.paper,\n                      children: user.score\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 122,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 121,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    xs: 4,\n                    children: /*#__PURE__*/_jsxDEV(CountdownCircleTimer, {\n                      isPlaying: true,\n                      duration: 10,\n                      strokeWidth: 3,\n                      size: 40,\n                      colors: [[\"#004777\", 0.33], [\"#F7B801\", 0.33], [\"#A30000\", 0.33]],\n                      children: ({\n                        remainingTime\n                      }) => remainingTime\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 127,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 126,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          children: `Room Id: ${room}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h1\",\n          children: count\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"contained\",\n          color: \"primary\" // ref={countingButtonPress}\n          ,\n          onClick: () => {\n            handleButtonPress();\n          },\n          children: \"Press Me\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(GameScreen, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = GameScreen;\nexport default GameScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"GameScreen\");","map":{"version":3,"sources":["/home/wkalim/Documents/University_Courses/CS4483/clicker.io/client/src/components/GameScreen.jsx"],"names":["React","useState","useEffect","Grid","Typography","Button","Table","TableBody","TableCell","TableHead","TableRow","Paper","makeStyles","CountdownCircleTimer","DataGrid","styles","root","width","overflowX","table","minWidth","useStyles","theme","flexGrow","paper","padding","spacing","textAlign","color","palette","text","secondary","GameScreen","props","classes","id","count","room","socketIO","username","users","startGame","pageSize","console","log","columns","field","headerName","rows","map","user","index","row","name","score","timeRemaining","handleButtonPress","data","message","timestamp","Date","now","emit","remainingTime"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SACEC,IADF,EAEEC,UAFF,EAGEC,MAHF,EAIEC,KAJF,EAKEC,SALF,EAMEC,SANF,EAOEC,SAPF,EAQEC,QARF,EASEC,KATF,QAUO,mBAVP;AAYA,SAASC,UAAT,QAA2B,0BAA3B;AAEA,SAASC,oBAAT,QAAqC,8BAArC;AAEA,SAASC,QAAT,QAAyB,wBAAzB;;;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE,MADH;AAEJC,IAAAA,SAAS,EAAE;AAFP,GADO;AAKbC,EAAAA,KAAK,EAAE;AACLC,IAAAA,QAAQ,EAAE;AADL;AALM,CAAf;AAUA,MAAMC,SAAS,GAAGT,UAAU,CAAEU,KAAD,KAAY;AACvCN,EAAAA,IAAI,EAAE;AACJO,IAAAA,QAAQ,EAAE;AADN,GADiC;AAIvCC,EAAAA,KAAK,EAAE;AACLC,IAAAA,OAAO,EAAEH,KAAK,CAACI,OAAN,CAAc,CAAd,CADJ;AAELC,IAAAA,SAAS,EAAE,QAFN;AAGLC,IAAAA,KAAK,EAAEN,KAAK,CAACO,OAAN,CAAcC,IAAd,CAAmBC;AAHrB;AAJgC,CAAZ,CAAD,CAA5B;;AAWA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAAA;;AACzB,QAAMC,OAAO,GAAGb,SAAS,EAAzB;AACA,QAAM;AAAEc,IAAAA,EAAF;AAAMC,IAAAA,KAAN;AAAaC,IAAAA,IAAb;AAAmBC,IAAAA,QAAnB;AAA6BC,IAAAA,QAA7B;AAAuCC,IAAAA,KAAvC;AAA8CC,IAAAA;AAA9C,MAA4DR,KAAlE;AACA,QAAMS,QAAQ,GAAG,CAAjB,CAHyB,CAKzB;AACA;AAEA;AACA;AACA;AACA;;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AAEA,QAAMK,OAAO,GAAG,CACd;AAAEC,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,UAAU,EAAE,IAA3B;AAAiC9B,IAAAA,KAAK,EAAE;AAAxC,GADc,EAEd;AAAE6B,IAAAA,KAAK,EAAE,UAAT;AAAqBC,IAAAA,UAAU,EAAE,MAAjC;AAAyC9B,IAAAA,KAAK,EAAE;AAAhD,GAFc,EAGd;AAAE6B,IAAAA,KAAK,EAAE,OAAT;AAAkBC,IAAAA,UAAU,EAAE,OAA9B;AAAuC9B,IAAAA,KAAK,EAAE;AAA9C,GAHc,EAId;AAAE6B,IAAAA,KAAK,EAAE,eAAT;AAA0BC,IAAAA,UAAU,EAAE,OAAtC;AAA+C9B,IAAAA,KAAK,EAAE;AAAtD,GAJc,CAAhB;AAMA,QAAM+B,IAAI,GAAGR,KAAK,CAACS,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACtCR,IAAAA,OAAO,CAACC,GAAR,CAAYM,IAAZ;AAEA,UAAME,GAAG,GAAG;AACVjB,MAAAA,EAAE,EAAEgB,KAAK,GAAG,CADF;AAEVZ,MAAAA,QAAQ,EAAEW,IAAI,CAACG,IAFL;AAGVC,MAAAA,KAAK,EAAEJ,IAAI,CAACI,KAHF;AAIVC,MAAAA,aAAa,EAAEL,IAAI,CAACK;AAJV,KAAZ;AAMA,WAAOH,GAAP;AACD,GAVY,CAAb,CAtByB,CAkCzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAT,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYI,IAAZ;;AAEA,QAAMQ,iBAAiB,GAAG,MAAM;AAC9B,UAAMC,IAAI,GAAG;AACXtB,MAAAA,EAAE,EAAEA,EADO;AAEXE,MAAAA,IAAI,EAAEA,IAFK;AAGXqB,MAAAA,OAAO,EAAE,aAHE;AAIXC,MAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL,EAJA;AAKXtB,MAAAA,QAAQ,EAAEA;AALC,KAAb;AAQAI,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYa,IAAZ;AACAnB,IAAAA,QAAQ,CAACwB,IAAT,CAAc,aAAd,EAA6BL,IAA7B;AACD,GAZD;;AAcA,sBACE;AAAA,2BACE,QAAC,IAAD;AACE,MAAA,SAAS,MADX;AAEE,MAAA,OAAO,EAAE,CAFX;AAGE,MAAA,KAAK,EAAC,QAHR;AAIE,MAAA,OAAO,EAAC,QAJV;AAKE,MAAA,SAAS,EAAC,QALZ;AAAA,8BAOE,QAAC,IAAD;AAAM,QAAA,SAAS,MAAf;AAAgB,QAAA,IAAI,MAApB;AAAqB,QAAA,EAAE,EAAE,EAAzB;AAA6B,QAAA,OAAO,EAAE,CAAtC;AAAA,+BACE,QAAC,KAAD,CAAO,QAAP;AAAA,iCACE,QAAC,KAAD;AAAO,YAAA,KAAK,EAAE1C,MAAM,CAACC,IAArB;AAAA,mCACE,QAAC,IAAD;AAAM,cAAA,SAAS,MAAf;AAAgB,cAAA,OAAO,EAAE,CAAzB;AAAA,wBACGwB,KAAK,CAACS,GAAN,CAAWC,IAAD,IAAU;AACnB,oCACE;AAAA,0CACE,QAAC,IAAD;AAAM,oBAAA,IAAI,MAAV;AAAW,oBAAA,EAAE,EAAE,CAAf;AAAA,2CACE,QAAC,KAAD;AAAO,sBAAA,SAAS,EAAEhB,OAAO,CAACV,KAA1B;AAAA,gCACG0B,IAAI,CAACG;AADR;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,0BADF,eAME,QAAC,IAAD;AAAM,oBAAA,IAAI,MAAV;AAAW,oBAAA,EAAE,EAAE,CAAf;AAAA,2CACE,QAAC,KAAD;AAAO,sBAAA,SAAS,EAAEnB,OAAO,CAACV,KAA1B;AAAA,gCACG0B,IAAI,CAACI;AADR;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,0BANF,eAWE,QAAC,IAAD;AAAM,oBAAA,IAAI,MAAV;AAAW,oBAAA,EAAE,EAAE,CAAf;AAAA,2CACE,QAAC,oBAAD;AACE,sBAAA,SAAS,MADX;AAEE,sBAAA,QAAQ,EAAE,EAFZ;AAGE,sBAAA,WAAW,EAAE,CAHf;AAIE,sBAAA,IAAI,EAAE,EAJR;AAKE,sBAAA,MAAM,EAAE,CACN,CAAC,SAAD,EAAY,IAAZ,CADM,EAEN,CAAC,SAAD,EAAY,IAAZ,CAFM,EAGN,CAAC,SAAD,EAAY,IAAZ,CAHM,CALV;AAAA,gCAWG,CAAC;AAAES,wBAAAA;AAAF,uBAAD,KAAuBA;AAX1B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,0BAXF;AAAA,gCADF;AA6BD,eA9BA;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAPF,eA+GE,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,EAAf;AAAA,gCACE,QAAC,UAAD;AAAA,oBAAc,YAAW1B,IAAK;AAA9B;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,UAAD;AAAY,UAAA,OAAO,EAAC,IAApB;AAAA,oBAA0BD;AAA1B;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE,QAAC,MAAD;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,OAAO,EAAC,WAFV;AAGE,UAAA,KAAK,EAAC,SAHR,CAIE;AAJF;AAKE,UAAA,OAAO,EAAE,MAAM;AACboB,YAAAA,iBAAiB;AAClB,WAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cA/GF,eA8HE,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE;AAAf;AAAA;AAAA;AAAA;AAAA,cA9HF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAoID;;GA/LQxB,U;UACSX,S;;;KADTW,U;AAiMT,eAAeA,UAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  Grid,\n  Typography,\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Paper,\n} from \"@material-ui/core\";\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\n\nimport { DataGrid } from \"@material-ui/data-grid\";\n\nconst styles = {\n  root: {\n    width: \"100%\",\n    overflowX: \"auto\",\n  },\n  table: {\n    minWidth: 700,\n  },\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\nfunction GameScreen(props) {\n  const classes = useStyles();\n  const { id, count, room, socketIO, username, users, startGame } = props;\n  const pageSize = 5;\n\n  // useEffect(() => {\n  //   document.addEventListener(\"keydown\", countingButtonPress, false);\n\n  //   return () => {\n  //     document.removeEventListener(\"keydown\", countingButtonPress, false);\n  //   };\n  // }, []);\n\n  console.log(\"Users\");\n  console.log(users);\n\n  const columns = [\n    { field: \"id\", headerName: \"ID\", width: 100 },\n    { field: \"username\", headerName: \"Name\", width: 100 },\n    { field: \"score\", headerName: \"Score\", width: 100 },\n    { field: \"timeRemaining\", headerName: \"Timer\", width: 100 },\n  ];\n  const rows = users.map((user, index) => {\n    console.log(user);\n\n    const row = {\n      id: index + 1,\n      username: user.name,\n      score: user.score,\n      timeRemaining: user.timeRemaining,\n    };\n    return row;\n  });\n\n  // const countingButtonPress = (event) => {\n  //   if (startGame) {\n  //     if (event?.keyCode === 32) {\n  //       handleButtonPress();\n  //     }\n  //   }\n  // };\n\n  console.log(\"rows\");\n  console.log(rows);\n\n  const handleButtonPress = () => {\n    const data = {\n      id: id,\n      room: room,\n      message: \"Hello World\",\n      timestamp: Date.now(),\n      username: username,\n    };\n\n    console.log(\"data\");\n    console.log(data);\n    socketIO.emit(\"buttonPress\", data);\n  };\n\n  return (\n    <>\n      <Grid\n        container\n        spacing={0}\n        align=\"center\"\n        justify=\"center\"\n        direction=\"column\"\n      >\n        <Grid container item xs={12} spacing={0}>\n          <React.Fragment>\n            <Paper style={styles.root}>\n              <Grid container spacing={0}>\n                {users.map((user) => {\n                  return (\n                    <>\n                      <Grid item xs={4}>\n                        <Paper className={classes.paper}>\n                          {user.name}\n                        </Paper>\n                      </Grid>\n                      <Grid item xs={4}>\n                        <Paper className={classes.paper}>\n                          {user.score}\n                        </Paper>\n                      </Grid>\n                      <Grid item xs={4}>\n                        <CountdownCircleTimer\n                          isPlaying\n                          duration={10}\n                          strokeWidth={3}\n                          size={40}\n                          colors={[\n                            [\"#004777\", 0.33],\n                            [\"#F7B801\", 0.33],\n                            [\"#A30000\", 0.33],\n                          ]}\n                        >\n                          {({ remainingTime }) => remainingTime}\n                        </CountdownCircleTimer>\n                      </Grid>\n                    </>\n                  );\n                })}\n              </Grid>\n              {/* <Table style={styles.table}>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Name</TableCell>\n                    <TableCell numeric>Score</TableCell>\n                    <TableCell>Timer</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {users.map((user) => {\n                    return (\n                      <TableRow key={user.id}>\n                        <TableCell component=\"th\" scope=\"row\">\n                          {user.name}\n                        </TableCell>\n                        <TableCell numeric>{user.score}</TableCell>\n                        <TableCell>{user.timeRemaining}</TableCell>\n                        <TableCell>\n                          <CountdownCircleTimer\n                            isPlaying\n                            duration={10}\n                            strokeWidth={3}\n                            size={40}\n                            colors={[\n                              [\"#004777\", 0.33],\n                              [\"#F7B801\", 0.33],\n                              [\"#A30000\", 0.33],\n                            ]}\n                          >\n                            {({ remainingTime }) => remainingTime}\n                          </CountdownCircleTimer>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table> */}\n            </Paper>\n            {/* <DataGrid rows={rows} columns={columns} pageSize={pageSize}/> */}\n\n            {/* {users.map((user) => {\n              return (\n                <Grid\n                  item\n                  xs\n                  align={\"center\"}\n                  alignItems={\"center\"}\n                  justify={\"center\"}\n                >\n                  <CountdownCircleTimer\n                    isPlaying\n                    duration={10}\n                    strokeWidth={5}\n                    size={60}\n                    colors={[\n                      [\"#004777\", 0.33],\n                      [\"#F7B801\", 0.33],\n                      [\"#A30000\", 0.33],\n                    ]}\n                  >\n                    {({ remainingTime }) => remainingTime}\n                  </CountdownCircleTimer>\n                  <Typography variant=\"body\">{`${user.name}`}</Typography>\n                </Grid>\n              );\n            })} */}\n          </React.Fragment>\n        </Grid>\n        <Grid item xs={12}>\n          <Typography>{`Room Id: ${room}`}</Typography>\n          <Typography variant=\"h1\">{count}</Typography>\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            // ref={countingButtonPress}\n            onClick={() => {\n              handleButtonPress();\n            }}\n          >\n            Press Me\n          </Button>\n        </Grid>\n        <Grid item xs={12}></Grid>\n      </Grid>\n    </>\n  );\n}\n\nexport default GameScreen;\n"]},"metadata":{},"sourceType":"module"}