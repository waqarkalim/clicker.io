{"ast":null,"code":"var _jsxFileName = \"/home/wkalim/Documents/University_Courses/CS4483/clicker.io/client/src/components/GameScreen.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { Grid, Typography, Button } from \"@material-ui/core\";\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\nimport { DataGrid } from '@material-ui/data-grid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction GameScreen(props) {\n  const {\n    id,\n    count,\n    room,\n    socketIO,\n    username,\n    users,\n    startGame\n  } = props;\n  const pageSize = 5;\n  const columns = [{\n    field: 'username',\n    headerName: 'Name',\n    width: 70\n  }, {\n    field: 'score',\n    headerName: 'Score',\n    width: 70\n  }, {\n    field: 'timeRemaining',\n    headerName: 'Timer',\n    width: 70\n  }];\n  const rows = users.map(user => {\n    console.log(user);\n    const row = {\n      username: user.getName(),\n      score: user.getScore(),\n      timeRemaining: user.getTimeRemaining()\n    };\n    return row;\n  });\n\n  const countingButtonPress = event => {\n    if (startGame) {\n      if ((event === null || event === void 0 ? void 0 : event.keyCode) === 32) {\n        this.handleButtonPress();\n      }\n    }\n  };\n\n  const handleButtonPress = () => {\n    const data = {\n      id: id,\n      room: room,\n      message: \"Hello World\",\n      timestamp: Date.now(),\n      username: username\n    };\n    console.log(data);\n    socketIO.emit(\"buttonPress\", data);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 0,\n      align: \"center\",\n      justify: \"center\",\n      direction: \"column\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        item: true,\n        xs: 12,\n        spacing: 0,\n        children: /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: /*#__PURE__*/_jsxDEV(DataGrid, {\n            rows: rows,\n            columns: columns,\n            pageSize: pageSize\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          children: `Room Id: ${room}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h1\",\n          children: count\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), \"const columns = []\", /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"contained\",\n          color: \"primary\",\n          ref: countingButtonPress,\n          onClick: () => {\n            handleButtonPress();\n          },\n          children: \"Press Me\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_c = GameScreen;\nexport default GameScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"GameScreen\");","map":{"version":3,"sources":["/home/wkalim/Documents/University_Courses/CS4483/clicker.io/client/src/components/GameScreen.jsx"],"names":["React","useState","useEffect","Grid","Typography","Button","CountdownCircleTimer","DataGrid","GameScreen","props","id","count","room","socketIO","username","users","startGame","pageSize","columns","field","headerName","width","rows","map","user","console","log","row","getName","score","getScore","timeRemaining","getTimeRemaining","countingButtonPress","event","keyCode","handleButtonPress","data","message","timestamp","Date","now","emit"],"mappings":"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","sourcesContent":["import React, {\n  useState,\n  useEffect\n} from \"react\";\nimport {\n  Grid,\n  Typography,\n  Button\n} from \"@material-ui/core\";\nimport {\n  CountdownCircleTimer\n} from \"react-countdown-circle-timer\";\n\nimport { DataGrid } from '@material-ui/data-grid';\n\nfunction GameScreen(props) {\n  const { id, count, room, socketIO, username, users, startGame } = props;\n  const pageSize = 5;\n\n\n  const columns = [\n    {field: 'username', headerName: 'Name', width: 70},\n    {field: 'score', headerName: 'Score', width: 70},\n    {field: 'timeRemaining', headerName: 'Timer', width: 70}\n  ]\n\n  const rows = users.map((user) => {\n    console.log(user);\n    \n    const row = {\n      username: user.getName(),\n      score: user.getScore(),\n      timeRemaining: user.getTimeRemaining(),\n    }\n    return row;\n  })\n\n  const countingButtonPress = (event) => {\n    if (startGame) {\n      if (event?.keyCode === 32) {\n        this.handleButtonPress();\n      }\n    }\n  };\n\n  const handleButtonPress = () => {\n    const data = {\n      id: id,\n      room: room,\n      message: \"Hello World\",\n      timestamp: Date.now(),\n      username: username,\n    };\n    console.log(data);\n    socketIO.emit(\"buttonPress\", data);\n  };\n\n  return (\n    <>\n      <Grid\n        container\n        spacing={0}\n        align=\"center\"\n        justify=\"center\"\n        direction=\"column\"\n      >\n        <Grid container item xs={12} spacing={0}>\n          <React.Fragment>\n            <DataGrid rows={rows} columns={columns} pageSize={pageSize}/>\n            {/* {users.map((user) => {\n              return (\n                <Grid\n                  item\n                  xs\n                  align={\"center\"}\n                  alignItems={\"center\"}\n                  justify={\"center\"}\n                >\n                  <CountdownCircleTimer\n                    isPlaying\n                    duration={10}\n                    strokeWidth={5}\n                    size={60}\n                    colors={[\n                      [\"#004777\", 0.33],\n                      [\"#F7B801\", 0.33],\n                      [\"#A30000\", 0.33],\n                    ]}\n                  >\n                    {({ remainingTime }) => remainingTime}\n                  </CountdownCircleTimer>\n                  <Typography variant=\"body\">{`${user}`}</Typography>\n                </Grid>\n              );\n            })} */}\n          </React.Fragment>\n        </Grid>\n        <Grid item xs={12}>\n          <Typography>{`Room Id: ${room}`}</Typography>\n          <Typography variant=\"h1\">{count}</Typography>\n\n          const columns = []\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            ref={countingButtonPress}\n            onClick={() => {\n              handleButtonPress();\n            }}\n          >\n            Press Me\n          </Button>\n        </Grid>\n        <Grid item xs={12}></Grid>\n      </Grid>\n    </>\n  );\n}\n\nexport default GameScreen;\n"]},"metadata":{},"sourceType":"module"}