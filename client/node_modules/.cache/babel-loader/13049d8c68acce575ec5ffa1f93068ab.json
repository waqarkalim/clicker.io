{"ast":null,"code":"var _jsxFileName = \"/home/wkalim/Documents/University_Courses/CS4483/clicker.io/client/src/components/GameScreen.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { Grid, Typography, Button } from \"@material-ui/core\";\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\nimport { DataGrid } from \"@material-ui/data-grid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction GameScreen(props) {\n  const {\n    id,\n    count,\n    room,\n    socketIO,\n    username,\n    users,\n    startGame\n  } = props;\n  const pageSize = 5; // useEffect(() => {\n  //   document.addEventListener(\"keydown\", countingButtonPress, false);\n  //   return () => {\n  //     document.removeEventListener(\"keydown\", countingButtonPress, false);\n  //   };\n  // }, []);\n\n  console.log(\"Users\");\n  console.log(users);\n  const columns = [{\n    field: \"id\",\n    headerName: \"ID\",\n    width: 30\n  }, {\n    field: \"username\",\n    headerName: \"Name\",\n    width: 70\n  }, {\n    field: \"score\",\n    headerName: \"Score\",\n    width: 70\n  }, {\n    field: \"timeRemaining\",\n    headerName: \"Timer\",\n    width: 70\n  }];\n  const rows = users.map((user, index) => {\n    console.log(user);\n    const row = {\n      id: index + 1,\n      username: user.name,\n      score: user.score,\n      timeRemaining: user.timeRemaining // username: \"\",\n      // score: \"\",\n      // timeRemaining: \"\"\n\n    };\n    return row;\n  }); // const countingButtonPress = (event) => {\n  //   if (startGame) {\n  //     if (event?.keyCode === 32) {\n  //       handleButtonPress();\n  //     }\n  //   }\n  // };\n\n  const handleButtonPress = () => {\n    const data = {\n      id: id,\n      room: room,\n      message: \"Hello World\",\n      timestamp: Date.now(),\n      username: username\n    };\n    console.log(\"data\");\n    console.log(data);\n    socketIO.emit(\"buttonPress\", data);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 0,\n      align: \"center\",\n      justify: \"center\",\n      direction: \"column\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        item: true,\n        xs: 12,\n        spacing: 0,\n        children: /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(DataGrid, {\n            rows: rows,\n            columns: columns,\n            pageSize: pageSize\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this), users.map(user => {\n            return /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: true,\n              align: \"center\",\n              alignItems: \"center\",\n              justify: \"center\",\n              children: [/*#__PURE__*/_jsxDEV(CountdownCircleTimer, {\n                isPlaying: true,\n                duration: 10,\n                strokeWidth: 5,\n                size: 60,\n                colors: [[\"#004777\", 0.33], [\"#F7B801\", 0.33], [\"#A30000\", 0.33]],\n                children: ({\n                  remainingTime\n                }) => remainingTime\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body\",\n                children: `${user.name}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 17\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          children: `Room Id: ${room}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h1\",\n          children: count\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"contained\",\n          color: \"primary\" // ref={countingButtonPress}\n          ,\n          onClick: () => {\n            handleButtonPress();\n          },\n          children: \"Press Me\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_c = GameScreen;\nexport default GameScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"GameScreen\");","map":{"version":3,"sources":["/home/wkalim/Documents/University_Courses/CS4483/clicker.io/client/src/components/GameScreen.jsx"],"names":["React","useState","useEffect","Grid","Typography","Button","CountdownCircleTimer","DataGrid","GameScreen","props","id","count","room","socketIO","username","users","startGame","pageSize","console","log","columns","field","headerName","width","rows","map","user","index","row","name","score","timeRemaining","handleButtonPress","data","message","timestamp","Date","now","emit","remainingTime"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Grid, Typography, Button } from \"@material-ui/core\";\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\n\nimport { DataGrid } from \"@material-ui/data-grid\";\n\nfunction GameScreen(props) {\n  const { id, count, room, socketIO, username, users, startGame } = props;\n  const pageSize = 5;\n\n  // useEffect(() => {\n  //   document.addEventListener(\"keydown\", countingButtonPress, false);\n\n  //   return () => {\n  //     document.removeEventListener(\"keydown\", countingButtonPress, false);\n  //   };\n  // }, []);\n\n  console.log(\"Users\");\n  console.log(users);\n\n  const columns = [\n    { field: \"id\", headerName: \"ID\", width: 30 },\n    { field: \"username\", headerName: \"Name\", width: 70 },\n    { field: \"score\", headerName: \"Score\", width: 70 },\n    { field: \"timeRemaining\", headerName: \"Timer\", width: 70 },\n  ];\n  const rows = users.map((user, index) => {\n    console.log(user);\n\n    const row = {\n      id: index + 1,\n      username: user.name,\n      score: user.score,\n      timeRemaining: user.timeRemaining,\n      // username: \"\",\n      // score: \"\",\n      // timeRemaining: \"\"\n    };\n    return row;\n  });\n\n  // const countingButtonPress = (event) => {\n  //   if (startGame) {\n  //     if (event?.keyCode === 32) {\n  //       handleButtonPress();\n  //     }\n  //   }\n  // };\n\n  const handleButtonPress = () => {\n    const data = {\n      id: id,\n      room: room,\n      message: \"Hello World\",\n      timestamp: Date.now(),\n      username: username,\n    };\n\n    console.log(\"data\");\n    console.log(data);\n    socketIO.emit(\"buttonPress\", data);\n  };\n\n  return (\n    <>\n      <Grid\n        container\n        spacing={0}\n        align=\"center\"\n        justify=\"center\"\n        direction=\"column\"\n      >\n        <Grid container item xs={12} spacing={0}>\n          <React.Fragment>\n            <DataGrid rows={rows} columns={columns} pageSize={pageSize}/>\n            {users.map((user) => {\n              return (\n                <Grid\n                  item\n                  xs\n                  align={\"center\"}\n                  alignItems={\"center\"}\n                  justify={\"center\"}\n                >\n                  <CountdownCircleTimer\n                    isPlaying\n                    duration={10}\n                    strokeWidth={5}\n                    size={60}\n                    colors={[\n                      [\"#004777\", 0.33],\n                      [\"#F7B801\", 0.33],\n                      [\"#A30000\", 0.33],\n                    ]}\n                  >\n                    {({ remainingTime }) => remainingTime}\n                  </CountdownCircleTimer>\n                  <Typography variant=\"body\">{`${user.name}`}</Typography>\n                </Grid>\n              );\n            })}\n          </React.Fragment>\n        </Grid>\n        <Grid item xs={12}>\n          <Typography>{`Room Id: ${room}`}</Typography>\n          <Typography variant=\"h1\">{count}</Typography>\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            // ref={countingButtonPress}\n            onClick={() => {\n              handleButtonPress();\n            }}\n          >\n            Press Me\n          </Button>\n        </Grid>\n        <Grid item xs={12}></Grid>\n      </Grid>\n    </>\n  );\n}\n\nexport default GameScreen;\n"]},"metadata":{},"sourceType":"module"}