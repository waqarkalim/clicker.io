{"ast":null,"code":"var _jsxFileName = \"/home/wkalim/Documents/University_Courses/CS4483/clicker.io/client/src/components/GameScreen.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Grid, Typography, Button, Table, TableBody, TableCell, TableHead, TableRow, Paper } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\nimport { DataGrid } from \"@material-ui/data-grid\";\nimport UserCard from \"./UserCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    padding: theme.spacing(2)\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary\n  } // root: {\n  //   display: \"flex\",\n  //   marginTop: theme.spacing.unit * 3,\n  //   overflowX: \"hide\",\n  //   width: \"100%\",\n  //   // justifyContent: \"center\",\n  //   // alignItems: \"center\",\n  //   backgroundColor: \"#282c34\",\n  // },\n  // table: {\n  //   minWidth: 340,\n  // },\n  // tableCell: {\n  //   paddingRight: 4,\n  //   paddingLeft: 5,\n  //   textAlign: \"center\",\n  //   margin: \"auto\",\n  // },\n\n}));\n\nfunction GameScreen(props) {\n  _s();\n\n  const classes = useStyles();\n  const {\n    id,\n    count,\n    room,\n    socketIO,\n    username,\n    users,\n    startGame,\n    successful_click\n  } = props;\n  const pageSize = 5; // useEffect(() => {\n  //   document.addEventListener(\"keydown\", countingButtonPress, false);\n  //   return () => {\n  //     document.removeEventListener(\"keydown\", countingButtonPress, false);\n  //   };\n  // }, []);\n\n  console.log(\"Users\");\n  console.log(users);\n  const columns = [{\n    field: \"id\",\n    headerName: \"ID\",\n    width: 100\n  }, {\n    field: \"username\",\n    headerName: \"Name\",\n    width: 100\n  }, {\n    field: \"score\",\n    headerName: \"Score\",\n    width: 100\n  }, {\n    field: \"timeRemaining\",\n    headerName: \"Timer\",\n    width: 100\n  }];\n  const rows = users.map((user, index) => {\n    console.log(user);\n    const row = {\n      id: index + 1,\n      username: user.name,\n      score: user.score,\n      timeRemaining: user.timeRemaining\n    };\n    return row;\n  }); // const countingButtonPress = (event) => {\n  //   if (startGame) {\n  //     if (event?.keyCode === 32) {\n  //       handleButtonPress();\n  //     }\n  //   }\n  // };\n\n  console.log(\"rows\");\n  console.log(rows);\n\n  const handleButtonPress = () => {\n    const data = {\n      id: id,\n      room: room,\n      message: \"Hello World\",\n      timestamp: Date.now(),\n      username: username\n    };\n    console.log(\"data\");\n    console.log(data);\n    socketIO.emit(\"buttonPress\", data);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 0,\n      align: \"center\",\n      justify: \"center\",\n      direction: \"column\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.root,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          item: true,\n          xs: 12,\n          spacing: 0,\n          children: /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: users.map(user => {\n              return /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: true,\n                  children: /*#__PURE__*/_jsxDEV(UserCard, {\n                    name: user.name,\n                    score: user.score,\n                    timeRemaining: user.timeRemaining,\n                    restart: user.successful_click\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 127,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 126,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          children: `Room Id: ${room}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h1\",\n          children: count\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"contained\",\n          color: \"primary\" // ref={countingButtonPress}\n          ,\n          onClick: () => {\n            handleButtonPress();\n          },\n          children: \"Press Me\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(GameScreen, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = GameScreen;\nexport default GameScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"GameScreen\");","map":{"version":3,"sources":["/home/wkalim/Documents/University_Courses/CS4483/clicker.io/client/src/components/GameScreen.jsx"],"names":["React","useState","useEffect","Grid","Typography","Button","Table","TableBody","TableCell","TableHead","TableRow","Paper","makeStyles","CountdownCircleTimer","DataGrid","UserCard","useStyles","theme","root","flexGrow","padding","spacing","paper","textAlign","color","palette","text","secondary","GameScreen","props","classes","id","count","room","socketIO","username","users","startGame","successful_click","pageSize","console","log","columns","field","headerName","width","rows","map","user","index","row","name","score","timeRemaining","handleButtonPress","data","message","timestamp","Date","now","emit"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SACEC,IADF,EAEEC,UAFF,EAGEC,MAHF,EAIEC,KAJF,EAKEC,SALF,EAMEC,SANF,EAOEC,SAPF,EAQEC,QARF,EASEC,KATF,QAUO,mBAVP;AAYA,SAASC,UAAT,QAA2B,0BAA3B;AAEA,SAASC,oBAAT,QAAqC,8BAArC;AAEA,SAASC,QAAT,QAAyB,wBAAzB;AAEA,OAAOC,QAAP,MAAqB,YAArB;;;AAEA,MAAMC,SAAS,GAAGJ,UAAU,CAAEK,KAAD,KAAY;AACvCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,QAAQ,EAAE,CADN;AAEJC,IAAAA,OAAO,EAAEH,KAAK,CAACI,OAAN,CAAc,CAAd;AAFL,GADiC;AAKvCC,EAAAA,KAAK,EAAE;AACLF,IAAAA,OAAO,EAAEH,KAAK,CAACI,OAAN,CAAc,CAAd,CADJ;AAELE,IAAAA,SAAS,EAAE,QAFN;AAGLC,IAAAA,KAAK,EAAEP,KAAK,CAACQ,OAAN,CAAcC,IAAd,CAAmBC;AAHrB,GALgC,CAUvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA3BuC,CAAZ,CAAD,CAA5B;;AA8BA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAAA;;AACzB,QAAMC,OAAO,GAAGd,SAAS,EAAzB;AACA,QAAM;AAAEe,IAAAA,EAAF;AAAMC,IAAAA,KAAN;AAAaC,IAAAA,IAAb;AAAmBC,IAAAA,QAAnB;AAA6BC,IAAAA,QAA7B;AAAuCC,IAAAA,KAAvC;AAA8CC,IAAAA,SAA9C;AAAyDC,IAAAA;AAAzD,MAA8ET,KAApF;AACA,QAAMU,QAAQ,GAAG,CAAjB,CAHyB,CAKzB;AACA;AAEA;AACA;AACA;AACA;;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AAEA,QAAMM,OAAO,GAAG,CACd;AAAEC,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,UAAU,EAAE,IAA3B;AAAiCC,IAAAA,KAAK,EAAE;AAAxC,GADc,EAEd;AAAEF,IAAAA,KAAK,EAAE,UAAT;AAAqBC,IAAAA,UAAU,EAAE,MAAjC;AAAyCC,IAAAA,KAAK,EAAE;AAAhD,GAFc,EAGd;AAAEF,IAAAA,KAAK,EAAE,OAAT;AAAkBC,IAAAA,UAAU,EAAE,OAA9B;AAAuCC,IAAAA,KAAK,EAAE;AAA9C,GAHc,EAId;AAAEF,IAAAA,KAAK,EAAE,eAAT;AAA0BC,IAAAA,UAAU,EAAE,OAAtC;AAA+CC,IAAAA,KAAK,EAAE;AAAtD,GAJc,CAAhB;AAMA,QAAMC,IAAI,GAAGV,KAAK,CAACW,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACtCT,IAAAA,OAAO,CAACC,GAAR,CAAYO,IAAZ;AAEA,UAAME,GAAG,GAAG;AACVnB,MAAAA,EAAE,EAAEkB,KAAK,GAAG,CADF;AAEVd,MAAAA,QAAQ,EAAEa,IAAI,CAACG,IAFL;AAGVC,MAAAA,KAAK,EAAEJ,IAAI,CAACI,KAHF;AAIVC,MAAAA,aAAa,EAAEL,IAAI,CAACK;AAJV,KAAZ;AAMA,WAAOH,GAAP;AACD,GAVY,CAAb,CAtByB,CAkCzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAV,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYK,IAAZ;;AAEA,QAAMQ,iBAAiB,GAAG,MAAM;AAC9B,UAAMC,IAAI,GAAG;AACXxB,MAAAA,EAAE,EAAEA,EADO;AAEXE,MAAAA,IAAI,EAAEA,IAFK;AAGXuB,MAAAA,OAAO,EAAE,aAHE;AAIXC,MAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL,EAJA;AAKXxB,MAAAA,QAAQ,EAAEA;AALC,KAAb;AAQAK,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYc,IAAZ;AACArB,IAAAA,QAAQ,CAAC0B,IAAT,CAAc,aAAd,EAA6BL,IAA7B;AACD,GAZD;;AAcA,sBACE;AAAA,2BACE,QAAC,IAAD;AACE,MAAA,SAAS,MADX;AAEE,MAAA,OAAO,EAAE,CAFX;AAGE,MAAA,KAAK,EAAC,QAHR;AAIE,MAAA,OAAO,EAAC,QAJV;AAKE,MAAA,SAAS,EAAC,QALZ;AAAA,8BAOE;AAAK,QAAA,SAAS,EAAEzB,OAAO,CAACZ,IAAxB;AAAA,+BACE,QAAC,IAAD;AAAM,UAAA,SAAS,MAAf;AAAgB,UAAA,IAAI,MAApB;AAAqB,UAAA,EAAE,EAAE,EAAzB;AAA6B,UAAA,OAAO,EAAE,CAAtC;AAAA,iCACE,QAAC,KAAD,CAAO,QAAP;AAAA,sBACGkB,KAAK,CAACW,GAAN,CAAWC,IAAD,IAAU;AACnB,kCACE;AAAA,uCACE,QAAC,IAAD;AAAM,kBAAA,IAAI,MAAV;AAAW,kBAAA,EAAE,MAAb;AAAA,yCACE,QAAC,QAAD;AACE,oBAAA,IAAI,EAAEA,IAAI,CAACG,IADb;AAEE,oBAAA,KAAK,EAAEH,IAAI,CAACI,KAFd;AAGE,oBAAA,aAAa,EAAEJ,IAAI,CAACK,aAHtB;AAIE,oBAAA,OAAO,EAAEL,IAAI,CAACV;AAJhB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF,+BADF;AAYD,aAbA;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAPF,eA4BE,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,EAAf;AAAA,gCACE,QAAC,UAAD;AAAA,oBAAc,YAAWL,IAAK;AAA9B;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,UAAD;AAAY,UAAA,OAAO,EAAC,IAApB;AAAA,oBAA0BD;AAA1B;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE,QAAC,MAAD;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,OAAO,EAAC,WAFV;AAGE,UAAA,KAAK,EAAC,SAHR,CAIE;AAJF;AAKE,UAAA,OAAO,EAAE,MAAM;AACbsB,YAAAA,iBAAiB;AAClB,WAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cA5BF,eA2CE,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE;AAAf;AAAA;AAAA;AAAA;AAAA,cA3CF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAiDD;;GA5GQ1B,U;UACSZ,S;;;KADTY,U;AA8GT,eAAeA,UAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  Grid,\n  Typography,\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Paper,\n} from \"@material-ui/core\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\n\nimport { DataGrid } from \"@material-ui/data-grid\";\n\nimport UserCard from \"./UserCard\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    padding: theme.spacing(2)\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n  },\n  // root: {\n  //   display: \"flex\",\n  //   marginTop: theme.spacing.unit * 3,\n  //   overflowX: \"hide\",\n  //   width: \"100%\",\n  //   // justifyContent: \"center\",\n  //   // alignItems: \"center\",\n  //   backgroundColor: \"#282c34\",\n  // },\n  // table: {\n  //   minWidth: 340,\n  // },\n  // tableCell: {\n  //   paddingRight: 4,\n  //   paddingLeft: 5,\n  //   textAlign: \"center\",\n  //   margin: \"auto\",\n  // },\n}));\n\nfunction GameScreen(props) {\n  const classes = useStyles();\n  const { id, count, room, socketIO, username, users, startGame, successful_click } = props;\n  const pageSize = 5;\n\n  // useEffect(() => {\n  //   document.addEventListener(\"keydown\", countingButtonPress, false);\n\n  //   return () => {\n  //     document.removeEventListener(\"keydown\", countingButtonPress, false);\n  //   };\n  // }, []);\n\n  console.log(\"Users\");\n  console.log(users);\n\n  const columns = [\n    { field: \"id\", headerName: \"ID\", width: 100 },\n    { field: \"username\", headerName: \"Name\", width: 100 },\n    { field: \"score\", headerName: \"Score\", width: 100 },\n    { field: \"timeRemaining\", headerName: \"Timer\", width: 100 },\n  ];\n  const rows = users.map((user, index) => {\n    console.log(user);\n\n    const row = {\n      id: index + 1,\n      username: user.name,\n      score: user.score,\n      timeRemaining: user.timeRemaining,\n    };\n    return row;\n  });\n\n  // const countingButtonPress = (event) => {\n  //   if (startGame) {\n  //     if (event?.keyCode === 32) {\n  //       handleButtonPress();\n  //     }\n  //   }\n  // };\n\n  console.log(\"rows\");\n  console.log(rows);\n\n  const handleButtonPress = () => {\n    const data = {\n      id: id,\n      room: room,\n      message: \"Hello World\",\n      timestamp: Date.now(),\n      username: username,\n    };\n\n    console.log(\"data\");\n    console.log(data);\n    socketIO.emit(\"buttonPress\", data);\n  };\n\n  return (\n    <>\n      <Grid\n        container\n        spacing={0}\n        align=\"center\"\n        justify=\"center\"\n        direction=\"column\"\n      >\n        <div className={classes.root}>\n          <Grid container item xs={12} spacing={0}>\n            <React.Fragment>\n              {users.map((user) => {\n                return (\n                  <>\n                    <Grid item xs>\n                      <UserCard\n                        name={user.name}\n                        score={user.score}\n                        timeRemaining={user.timeRemaining}\n                        restart={user.successful_click}\n                      />\n                    </Grid>\n                  </>\n                );\n              })}\n            </React.Fragment>\n          </Grid>\n        </div>\n\n        <Grid item xs={12}>\n          <Typography>{`Room Id: ${room}`}</Typography>\n          <Typography variant=\"h1\">{count}</Typography>\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            // ref={countingButtonPress}\n            onClick={() => {\n              handleButtonPress();\n            }}\n          >\n            Press Me\n          </Button>\n        </Grid>\n        <Grid item xs={12}></Grid>\n      </Grid>\n    </>\n  );\n}\n\nexport default GameScreen;\n"]},"metadata":{},"sourceType":"module"}